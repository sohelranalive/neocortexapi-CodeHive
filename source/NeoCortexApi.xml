<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NeoCortexApi</name>
    </assembly>
    <members>
        <member name="F:NeoCortexApi.ClassificationExperiment`1.actualValues">
            Array of actual values 
        </member>
        <member name="F:NeoCortexApi.ClassificationExperiment`1.probabilities">
            Map of step count -to- probabilities 
        </member>
        <member name="M:NeoCortexApi.ClassificationExperiment`1.copy">
            Utility method to copy the contents of a ClassifierResult.
            
            @return  a copy of this {@code ClassifierResult} which will not be affected
            by changes to the original.
        </member>
        <member name="M:NeoCortexApi.ClassificationExperiment`1.getActualValue(System.Int32)">
            Returns the actual value for the specified bucket index
            
            @param bucketIndex
            @return
        </member>
        <member name="M:NeoCortexApi.ClassificationExperiment`1.getActualValues">
            Returns all actual values entered
            
            @return  array of type &lt;T&gt;
        </member>
        <member name="M:NeoCortexApi.ClassificationExperiment`1.setActualValues(`0[])">
            Sets the array of actual values being entered.
            
            @param values
            @param &lt;T&gt;[]	the value array type
        </member>
        <member name="M:NeoCortexApi.ClassificationExperiment`1.getActualValueCount">
            Returns a count of actual values entered
            @return
        </member>
        <member name="M:NeoCortexApi.ClassificationExperiment`1.getStat(System.Int32,System.Int32)">
            Returns the probability at the specified index for the given step
            @param step
            @param bucketIndex
            @return
        </member>
        <member name="M:NeoCortexApi.ClassificationExperiment`1.setStats(System.Int32,System.Double[])">
            Sets the array of probabilities for the specified step
            @param step
            @param votes
        </member>
        <member name="M:NeoCortexApi.ClassificationExperiment`1.getStats(System.Int32)">
            Returns the probabilities for the specified step
            @param step
            @return
        </member>
        <member name="M:NeoCortexApi.ClassificationExperiment`1.getMostProbableValue(System.Int32)">
            Returns the input value corresponding with the highest probability
            for the specified step.
            
            @param step		the step key under which the most probable value will be returned.
            @return
        </member>
        <member name="M:NeoCortexApi.ClassificationExperiment`1.getMostProbableBucketIndex(System.Int32)">
            Returns the bucket index corresponding with the highest probability
            for the specified step.
            
            @param step		the step key under which the most probable index will be returned.
            @return			-1 if there is no such entry
        </member>
        <member name="M:NeoCortexApi.ClassificationExperiment`1.getStepCount">
            Returns the count of steps
            @return
        </member>
        <member name="M:NeoCortexApi.ClassificationExperiment`1.getStatCount(System.Int32)">
            Returns the count of probabilities for the specified step
            @param	the step indexing the probability values
            @return
        </member>
        <member name="M:NeoCortexApi.ClassificationExperiment`1.stepSet">
            Returns a set of steps being recorded.
            @return
        </member>
        <member name="T:NeoCortexApi.DistributedCompute.HtmSparseIntDictionary`1">
            <summary>
            Acts as distributed dictionary of SparseObjectMatrix.
            </summary>
        </member>
        <member name="M:NeoCortexApi.DistributedCompute.HtmSparseIntDictionary`1.GetPartitionActorFromKey(System.Int32)">
            <summary>
            Returns the actor reference for specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.DistributedCompute.HtmSparseIntDictionary`1.CreatePartitionMap">
            <summary>
             Creates maps of partitions.
            </summary>
            <param name="nodes"></param>
            <param name="numElements"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.DistributedCompute.HtmSparseIntDictionary`1.CreatePartitionMap(System.Collections.Generic.List{System.String},System.Int32,System.Int32)">
            <summary>
            Creates map of partitions.
            </summary>
            <param name="nodes"></param>
            <param name="numElements"></param>
            <param name="numPartitionsPerNode"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.DistributedCompute.HtmSparseIntDictionary`1.GetPartitionsForKeyset(System.Collections.Generic.ICollection{NeoCortexApi.Entities.KeyPair})">
            <summary>
            Groups keys by partitions (actors).
            </summary>
            <param name="keyValuePairs"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Encoders.CategoryEncoder.#ctor(System.String[],System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Encodes a list of discrete categories (Strings), that are not related to each other
            so the value of the radius is set to 1
            </summary>
            <param name="category"></param>
            <param name="settings"></param>
        </member>
        <member name="M:NeoCortexApi.Encoders.CategoryEncoder.Encode(System.Object)">
            <summary>
            This method will gives the result of output array according to the given input
            </summary>
            <param name="inputData"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Encoders.CategoryEncoder.Encoding(System.Int32)">
            <summary>
            First for loop is used to assig array to zeros to avoid garbage value
            Second for loop is used for encode the array according to the Width, Radius and the elements 
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.Encoders.DateTimeEncoder.Precision">
            <summary>
            Defines the precision of DateTime encoder.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Encoders.DateTimeEncoder.m_MinDateTime">
            <summary>
            Minimum time encoded by encoder.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Encoders.DateTimeEncoder.GetBucketValues``1">
            <summary>
            <inheritdoc/>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.Encoders.DateTimeEncoderExperimental">
            <summary>
            For the implemention of encoder for the datetime encoder, date encoder only and time encoder only by using DateTimeEncoder class by using abstract class of EncoderBase.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Encoders.DateTimeEncoderExperimental.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            For the setting of radius and the width.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:NeoCortexApi.Encoders.DateTimeEncoderExperimental.EncodeDateOnly(System.Object)">
            <summary>
            Implementation of only Date encoder.  
            </summary>
            <param name="inputData"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Encoders.DateTimeEncoderExperimental.EncodeTimeOnly(System.Object)">
            <summary>
             Implementation of only Time encoder.  
            </summary>
            <param name="inputData"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Encoders.DateTimeEncoderExperimental.Encode(System.Object)">
            <summary>
            Implementation of n = width * (radius / range) forumla. 
            </summary>
            <param name="inputData"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Encoders.DateTimeEncoderExperimental.CreateEncodingArray(System.Int32,System.Int32)">
            <summary>
            Implemented logical condition for encoding bits of date and time. 
            </summary>
            <param name="element">The scalar value to be encoded.</param>
            <param name="numberOfBits">Number of required bits.</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Encoders.DateTimeEncoderExperimental.#ctor">
            <summary>
            From InitTest method for the setting of radius and width.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Encoders.DateTimeEncoderExperimental.Width">
            <summary>
            Overriding the width of encoder.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Encoders.DateTimeEncoderExperimental.IsDelta">
            <summary>
            Overriding the IsDelta for the encoder. 
            </summary>
        </member>
        <member name="M:NeoCortexApi.Encoders.DateTimeEncoderExperimental.GetBucketValues``1">
            <summary>
            <inheritdoc/>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.Encoders.EncoderBase">
            <summary>
            Base class for all encoders.
            </summary> 
        </member>
        <member name="F:NeoCortexApi.Encoders.EncoderBase.Properties">
            <summary>
            List of all encoder properties.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Encoders.EncoderBase.m_NumOfBits">
            <summary>
            number of bits in the representation (must be >= w) 
            </summary>
        </member>
        <member name="F:NeoCortexApi.Encoders.EncoderBase.halfWidth">
            <summary>
            the half width value
            </summary>
        </member>
        <member name="F:NeoCortexApi.Encoders.EncoderBase.topDownMapping">
            <summary>
            This matrix is used for the topDownCompute. We build it the first time topDownCompute is called
            </summary>
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Called by framework to initialize encoder with all required settings.
            </summary>
            <param name="encoderSettings"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoCortexApi.Encoders.EncoderBase.Initialize(System.Collections.Generic.Dictionary{System.String,System.Object})" -->
        <member name="M:NeoCortexApi.Encoders.EncoderBase.AfterInitialize">
            <summary>
            Called by framework to initialize encoder with all required settings. This method is useful
            for implementation of validation logic for properties.
            Otherwise, if any additional initialization is required, override this method.
            When this method is called, all encoder properties are already set in member <see cref="F:NeoCortexApi.Encoders.EncoderBase.Properties"/>.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Encoders.EncoderBase.Item(System.String)">
            <summary>
            Key acces to property set.
            </summary>
            <param name="key">Name of property.</param>
            <returns></returns>
        </member>
        <member name="P:NeoCortexApi.Encoders.EncoderBase.IsRealCortexModel">
            <summary>
            In real cortex mode, W must be >= 21. Empirical value.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Encoders.EncoderBase.N">
            <summary>
            The width of output vector of encoder. 
            It specifies the length of array, which will be occupied by output vector.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Encoders.EncoderBase.W">
            <summary>
            Number of bits set on one, which represents single encoded value.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Encoders.EncoderBase.Radius">
            <summary>
            How many input values are represented with W encoding bits. r=W*Res.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Encoders.EncoderBase.Resolution">
            <summary>
            How many input values are embedded in the single encoding bit. Res = (max-min)/N.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Encoders.EncoderBase.ClipInput">
            <summary>
            It cats bits at the beginning with negative position and at th eend after last bit.
            This happens only if Periodic is set on false.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Encoders.EncoderBase.Width">
            <summary>
             Gets the output width, in bits.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Encoders.EncoderBase.IsDelta">
            <summary>
            Returns true if the underlying encoder works on deltas
            </summary>
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.Encode(System.Object)">
            <summary>
            Encodes inputData and puts the encoded value into the output array, which is a 1-D array of length returned by <see cref="P:NeoCortexApi.Encoders.EncoderBase.W"/>.
            </summary>
            <param name="inputData">Data to encode. This should be validated by the encoder.</param>
            <returns>1-D array of same length returned by <see cref="P:NeoCortexApi.Encoders.EncoderBase.W"/></returns>
            <remarks>
            Note: The output array is reused, so clear it before updating it.
            </remarks>
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.GetBucketValues``1">
            <summary>
            Returns a list of items, one for each bucket defined by this encoder. Each item is the value assigned to that bucket, this is the same as the
            EncoderResult.value that would be returned by getBucketInfo() for that bucket and is in the same format as the input that would be passed to encode().<br></br>
            
            This call is faster than calling getBucketInfo() on each bucket individually if all you need are the bucket values.
            </summary>
            <typeparam name="T">class type parameter so that this method can return encoder specific value types</typeparam>
            <returns>list of items, each item representing the bucket value for that bucket.</returns>
        </member>
        <member name="M:NeoCortexApi.Encoders.EncoderBase.RightVecProd(NeoCortexApi.Entities.SparseObjectMatrix{System.Int32[]},System.Int32[])">
            <summary>
            Returns an array containing the sum of the right applied multiplications of each slice to the array passed in.
            </summary>
            <param name="matrix"></param>
            <param name="encoded"></param>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.Encoders.EncoderProperties">
            <summary>
            List of predefault mostly used encoder properties.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Encoders.EncoderProperties.EncoderQualifiedName">
            <summary>
            Type of encoder.
            </summary>
        </member>
        <member name="T:NeoCortexApi.Encoders.FieldMetaType">
            <summary>
            Predefined types
            </summary>
        </member>
        <member name="F:NeoCortexApi.Encoders.FieldMetaType.m_FieldTypeString">
            <summary>
            String representation to be used when a display.
            String is required.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Encoders.FieldMetaType.#ctor(System.String)">
            Private constructor 
        </member>
        <member name="M:NeoCortexApi.Encoders.FieldMetaType.NewEncoder">
            <summary>
            Returns the <see cref="T:NeoCortexApi.Encoders.EncoderBase"/> matching this field type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Encoders.FieldMetaType.Display">
            <summary>
            Returns the display string
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Encoders.FieldMetaType.FromString(System.String)">
            <summary>
            Parses the specified String and returns a <see cref="T:NeoCortexApi.Encoders.FieldMetaType"/> representing the passed in value. 
            </summary>
            <param name="s">the type in string form</param>
            <returns>the FieldMetaType indicated or the default: <see cref="F:NeoCortexApi.Encoders.FieldMetaType.FLOAT"/>.</returns>
        </member>
        <member name="T:NeoCortexApi.Encoders.GeoSpatialEncoderExperimental">
            <summary>
            Defines the <see cref="T:NeoCortexApi.Encoders.GeoSpatialEncoderExperimental" />
            </summary>
        </member>
        <member name="P:NeoCortexApi.Encoders.GeoSpatialEncoderExperimental.IsDelta">
            <summary>
            Gets a value indicating whether IsDelta
            </summary>
        </member>
        <member name="P:NeoCortexApi.Encoders.GeoSpatialEncoderExperimental.Width">
            <summary>
            Gets the Width
            </summary>
        </member>
        <member name="M:NeoCortexApi.Encoders.GeoSpatialEncoderExperimental.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Defines the NoOfBits. Works same as N. It is used to change Type of a variable
            </summary>
            <param name="encoderSettings">The encoderSettings<see cref="!:Dictionary&lt;string, object&gt;"/></param>
        </member>
        <member name="M:NeoCortexApi.Encoders.GeoSpatialEncoderExperimental.AfterInitialize">
            <summary>
            The AfterInitialize
            </summary>
        </member>
        <member name="M:NeoCortexApi.Encoders.GeoSpatialEncoderExperimental.Encode(System.Object)">
            <summary>
            The Encode
            </summary>
            <param name="inputData">The inputData<see cref="T:System.Object"/></param>
            <returns>The <see cref="!:int[]"/></returns>
        </member>
        <member name="M:NeoCortexApi.Encoders.GeoSpatialEncoderExperimental.Compute(System.Object,System.Boolean)">
            <summary>
            This method enables running in the network.
            </summary>
            <param name="inputData"></param>
            <param name="learn"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Encoders.GeoSpatialEncoderExperimental.GetBucketValues``1">
            <summary>
            The getBucketValues
            </summary>
            <typeparam name="T"></typeparam>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/></returns>
        </member>
        <member name="T:NeoCortexApi.Encoders.MultiEncoder">
            <summary>
            Encodes input by using of multiple encoders on the same data stream.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Encoders.MultiEncoder.m_Encoders">
            <summary>
            List of encoders used by MultiEncoder.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Encoders.MultiEncoder.Encode(System.Object)">
            <summary>
            Encodes data from all underlying encoders.
            </summary>
            <param name="inputData">Dictionary of inputs for all underlying encoders.</param>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.Encoders.ScalarEncoder">
            <summary>
            Defines the <see cref="T:NeoCortexApi.Encoders.ScalarEncoderExperimental" />
            </summary>
        </member>
        <member name="P:NeoCortexApi.Encoders.ScalarEncoder.IsDelta">
            <summary>
            Gets a value indicating whether IsDelta
            </summary>
        </member>
        <member name="P:NeoCortexApi.Encoders.ScalarEncoder.Width">
            <summary>
            Gets the Width
            </summary>
        </member>
        <member name="F:NeoCortexApi.Encoders.ScalarEncoder.NoOfBits">
            <summary>
            Defines the NoOfBits. Works same as N. It is used to change Type of a variable
            </summary>
        </member>
        <member name="F:NeoCortexApi.Encoders.ScalarEncoder.StartPoint">
            <summary>
            Defines the Starting point in an array to map active bits
            </summary>
        </member>
        <member name="F:NeoCortexApi.Encoders.ScalarEncoder.EndingPoint">
            <summary>
            Defines the EndingPoint in an array where active bits ends
            </summary>
        </member>
        <member name="F:NeoCortexApi.Encoders.ScalarEncoder.EndingPointForPeriodic">
            <summary>
            Defines the EndingPointForPeriodic
            </summary>
        </member>
        <member name="M:NeoCortexApi.Encoders.ScalarEncoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NeoCortexApi.Encoders.ScalarEncoderExperimental"/> class.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Encoders.ScalarEncoder.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:NeoCortexApi.Encoders.ScalarEncoderExperimental"/> class.
            </summary>
            <param name="encoderSettings">The encoderSettings<see cref="!:Dictionary&lt;string, object&gt;"/></param>
        </member>
        <member name="M:NeoCortexApi.Encoders.ScalarEncoder.AfterInitialize">
            <summary>
            The AfterInitialize
            </summary>
        </member>
        <member name="M:NeoCortexApi.Encoders.ScalarEncoder.Encode(System.Object)">
            <summary>
            The Encode
            </summary>
            <param name="inputData">The inputData<see cref="T:System.Object"/></param>
            <returns>The <see cref="!:int[]"/></returns>
        </member>
        <member name="M:NeoCortexApi.Encoders.ScalarEncoder.Compute(System.Object,System.Boolean)">
            <summary>
            This method enables running in the network.
            </summary>
            <param name="inputData"></param>
            <param name="learn"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Encoders.ScalarEncoder.GetBucketValues``1">
            <summary>
            <inheritdoc/>
            </summary>
            <typeparam name="T"></typeparam>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/></returns>
        </member>
        <member name="T:NeoCortexApi.Encoders.ScalarEncoderExperimental">
            <summary>
            Defines the <see cref="T:NeoCortexApi.Encoders.ScalarEncoderExperimental" />
            </summary>
        </member>
        <member name="P:NeoCortexApi.Encoders.ScalarEncoderExperimental.IsDelta">
            <summary>
            Gets a value indicating whether IsDelta
            </summary>
        </member>
        <member name="P:NeoCortexApi.Encoders.ScalarEncoderExperimental.Width">
            <summary>
            Gets the Width
            </summary>
        </member>
        <member name="F:NeoCortexApi.Encoders.ScalarEncoderExperimental.NoOfBits">
            <summary>
            Defines the NoOfBits. Works same as N. It is used to change Type of a variable
            </summary>
        </member>
        <member name="F:NeoCortexApi.Encoders.ScalarEncoderExperimental.StartPoint">
            <summary>
            Defines the Starting point in an array to map active bits
            </summary>
        </member>
        <member name="F:NeoCortexApi.Encoders.ScalarEncoderExperimental.EndingPoint">
            <summary>
            Defines the EndingPoint in an array where active bits ends
            </summary>
        </member>
        <member name="F:NeoCortexApi.Encoders.ScalarEncoderExperimental.EndingPointForPeriodic">
            <summary>
            Defines the EndingPointForPeriodic
            </summary>
        </member>
        <member name="M:NeoCortexApi.Encoders.ScalarEncoderExperimental.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NeoCortexApi.Encoders.ScalarEncoderExperimental"/> class.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Encoders.ScalarEncoderExperimental.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:NeoCortexApi.Encoders.ScalarEncoderExperimental"/> class.
            </summary>
            <param name="encoderSettings">The encoderSettings<see cref="!:Dictionary&lt;string, object&gt;"/></param>
        </member>
        <member name="M:NeoCortexApi.Encoders.ScalarEncoderExperimental.AfterInitialize">
            <summary>
            The AfterInitialize
            </summary>
        </member>
        <member name="M:NeoCortexApi.Encoders.ScalarEncoderExperimental.Encode(System.Object)">
            <summary>
            The Encode
            </summary>
            <param name="inputData">The inputData<see cref="T:System.Object"/></param>
            <returns>The <see cref="!:int[]"/></returns>
        </member>
        <member name="M:NeoCortexApi.Encoders.ScalarEncoderExperimental.GetBucketValues``1">
            <summary>
            The getBucketValues
            </summary>
            <typeparam name="T"></typeparam>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/></returns>
        </member>
        <member name="T:NeoCortexApi.Entities.SparseObjectMatrix`1">
            <summary>
            Allows storage of array data in sparse form, meaning that the indexes of the data stored are maintained while empty indexes are not. This allows
            savings in memory and computational efficiency because iterative algorithms need only query indexes containing valid data.
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            @author David Ray, Damir Dobric
            </remarks>
        </member>
        <member name="P:NeoCortexApi.Entities.SparseObjectMatrix`1.IsRemotelyDistributed">
            <summary>
            Returns true if sparse memory is remotely distributed. It means objects has to be synced with remote partitions.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.SparseObjectMatrix`1.#ctor(System.Int32[],System.Boolean,NeoCortexApi.Entities.IDistributedDictionary{System.Int32,`0})">
            <summary>
            Constructs a new <see cref="T:NeoCortexApi.Entities.SparseObjectMatrix`1"/>
            </summary>
            <param name="dimensions">the dimensions of this array</param>
            <param name="useColumnMajorOrdering">where inner index increments most frequently</param>
            <param name="dict"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.SparseObjectMatrix`1.set(System.Int32,`0)">
            <summary>
            Sets the object to occupy the specified index.
            </summary>
            <param name="index">The index the object will occupy</param>
            <param name="obj">the object to be indexed.</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.SparseObjectMatrix`1.set(System.Int32[],`0)">
            <summary>
            Sets the specified object to be indexed at the index computed from the specified coordinates.
            </summary>
            <param name="coordinates">the row major coordinates [outer --> ,...,..., inner]</param>
            <param name="obj">the object to be indexed.</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.SparseObjectMatrix`1.getObject(System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="index"><inheritdoc/></param>
            <returns><inheritdoc/></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.SparseObjectMatrix`1.get(System.Int32[])">
            Returns the T at the index computed from the specified coordinates
            @param coordinates   the coordinates from which to retrieve the indexed object
            @return  the indexed object
            <summary>
            <inheritdoc/>
            </summary>
            <param name="coordinates"><inheritdoc/></param>
            <returns><inheritdoc/></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.SparseObjectMatrix`1.GetColumn(System.Int32)">
            <summary>
            Returns the T at the specified index.
            </summary>
            <param name="index">the index of the T to return</param>
            <returns>the T at the specified index.</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.SparseObjectMatrix`1.GetSparseIndices">
            <summary>
            Returns a sorted array of occupied indexes.
            </summary>
            <returns>a sorted array of occupied indexes.</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.SparseObjectMatrix`1.ToString">
            <summary>
            <inheritdoc/>
            </summary>
            <returns><inheritdoc/></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.SparseObjectMatrix`1.GetHashCode">
            <summary>
            <inheritdoc/>
            </summary>
            <returns><inheritdoc/></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.SparseObjectMatrix`1.Equals(System.Object)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="obj"><inheritdoc/></param>
            <returns><inheritdoc/></returns>
        </member>
        <member name="M:NeoCortexApi.Helpers.GetRandomVector(System.Int32,System.Random)">
            <summary>
            Creates random vector of specified dimension.
            </summary>
            <param name="numOfBits"></param>
            <param name="rnd"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Helpers.StringifyVector(System.Int32[])">
            <summary>
            Creates string representation from one dimensional vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Helpers.StringifyVector``1(``0[],System.Func{System.Int32,``0,System.String})">
            <summary>
            Stringifies the vector by using of custom conversdion function.
            </summary>
            <param name="vector">The vector to be stringified.</param>
            <param name="fnc">Conversion function.</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Helpers.StringifyVector(System.Double[][])">
            <summary>
            Creates string representation from one dimensional vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="P:NeoCortexApi.Helpers.DefaultHtmSparseIntDictionaryConfig">
            <summary>
            Gets default sparse dictionary configuration.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Helpers.DefaultSbConfig">
            <summary>
            Gets default sparse dictionary configuration.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Helpers.BinarizeImage(System.String,System.Int32,System.String)">
            <summary>
            Binarize image to binarizedImage.
            </summary>
            <param name="mnistImage"></param>
            <param name="imageSize"></param>
            <param name="testName"></param>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.HomeostaticPlasticityController">
            <summary>
            Implements the new-born effect in the SP. This effect tracks the learning process of the SP 
            and switches-off the boosting mechanism (new-born effect) after the SP has entered a stable state 
            for all seen input patterns.
            </summary>
        </member>
        <member name="F:NeoCortexApi.HomeostaticPlasticityController.m_RequiredNumOfStableCycles">
            <summary>
            Number of minimal required stable cycles for every input.
            When this value is reached, the new-born effect will take a place.
            It means, the boosting will be disabled.
            </summary>
        </member>
        <member name="F:NeoCortexApi.HomeostaticPlasticityController.m_NumOfStableCyclesForInput">
            <summary>
            Number stable cycles for every input.
            </summary>
        </member>
        <member name="F:NeoCortexApi.HomeostaticPlasticityController.m_NumOfActiveColsForInput">
            <summary>
            Number of active columns in SDRs of last N steps.
            </summary>
        </member>
        <member name="F:NeoCortexApi.HomeostaticPlasticityController.m_InOutMap">
            <summary>
            Keeps the list of hash values of all seen input patterns.
            List of hashes. [key, val] = [hash(input), hash(output)]
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:NeoCortexApi.HomeostaticPlasticityController.m_OnStabilityStatusChanged" -->
        <member name="F:NeoCortexApi.HomeostaticPlasticityController.m_IsStable">
            <summary>
            Set on true when SP deactivates boosting and enter the stable state.
            Once SP enters the stable state and it becomes instable again, this value is set on false.
            </summary>
        </member>
        <member name="M:NeoCortexApi.HomeostaticPlasticityController.#ctor(NeoCortexApi.Entities.Connections,System.Int32,System.Action{System.Boolean,System.Int32,System.Double,System.Int32},System.Int32)">
            <summary>
            Creates the instance of the HPC to stabilize the Spatial Pooler learning process.
            </summary>
            <param name="htmMemory">The initialized HTM memory.</param>
            <param name="minCycles">The minimume required cycles to keep boosting. This parameter defiens the new-born stage of the SP.
            During this period, the SP will boost columns and bee instable. After this period the HPC will switch off boosting.</param>
            <param name="onStabilityStatusChanged">Invoked when the SP changes the state from instable to stable and vise versa.</param>
            <param name="numOfCyclesToWaitOnChange">How many cycles SDRs of all input patterns must be unchanged to declare the SP as stable.</param>
        </member>
        <member name="M:NeoCortexApi.HomeostaticPlasticityController.Compute(System.Int32[],System.Int32[])">
            <summary>
            Invoked as the last step in learning of the SP.
            </summary>
            <param name="input">The input of the SP in the current cycle.</param>
            <param name="output">The SDR of active columns as calculated output of SP.</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.HomeostaticPlasticityController.Correlate(System.Int32[],System.Int32[])">
            <summary>
            Calculates the correlation of bits in ywo arrays.
            </summary>
            <param name="data1"></param>
            <param name="data2"></param>
            <returns>Similarity of two arrays.</returns>
        </member>
        <member name="M:NeoCortexApi.HomeostaticPlasticityController.GetHash(System.Int32[])">
            <summary>
            Compute the hash from the array.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.HtmSerializer">
            Contains methods for Serialization and Deserialization and is applicable to Spatial Pooler and Temoral Memory Class
        </member>
        <member name="M:NeoCortexApi.HtmSerializer.Serialize(System.Object,System.String)">
            Method for Serialization of an object. Can serialize properties and fields o the particular Object to 
            Can serialize properties and fields ofthe particular Object to a variable like String or a storage place like file.
        </member>
        <member name="M:NeoCortexApi.HtmSerializer.Serialize(System.Object)">
            Stores and returns the serialized string value through this Stringbuilder.
            Uses Reflection API and lower level method SerializeMember() to fetch properties and fields of the object and stores the result in the Stringbuilder
        </member>
        <member name="M:NeoCortexApi.HtmSerializer.SerializeMember(System.Boolean,System.Text.StringBuilder,System.Type,System.String,System.Object)">
            Obtains property and fields of the object by applying some of the lower level generic methods which are implemented in the subsequent section of this code.. 
            Different methods are applied based on specific attributes like types, type names etc.
            These conditions are applied to solve some of the complexities involved in Serializing complex classes within HTM
        </member>
        <member name="M:NeoCortexApi.HtmSerializer.SerializeCustomType(System.Text.StringBuilder,System.String,System.Object)">
            Serialization Method for some of the specific classes. 
            Similar Serialization method is impplemented in thos concerned classes and the Serialize method can be invoked through this method in this class.
        </member>
        <member name="M:NeoCortexApi.HtmSerializer.SerializeArray(System.Text.StringBuilder,System.String,System.Object)">
                     * Applied if the type of the concerned property/field is an Array 
                     
        </member>
        <member name="M:NeoCortexApi.HtmSerializer.SerializeDictionary(System.Text.StringBuilder,System.String,System.Object)">
            Applied if the type of the concerned  property/field is a Dictionary
        </member>
        <member name="M:NeoCortexApi.HtmSerializer.SerializeStringValue(System.Text.StringBuilder,System.String,System.String)">
            Returns the name of the particular Property and String value. Used for simple properties.
        </member>
        <member name="M:NeoCortexApi.HtmSerializer.SerializeNumericValue(System.Text.StringBuilder,System.String,System.String)">
            Returns the name of the particular Property and Numeric value. 
        </member>
        <member name="M:NeoCortexApi.HtmSerializer.AppendPropertyName(System.Text.StringBuilder,System.String)">
            Returns the name of the particular Property
        </member>
        <member name="M:NeoCortexApi.HtmSerializer.SerializeComplexValue(System.Text.StringBuilder,System.String,System.Object)">
            Applied if the concerned  property/field involves Complex Types like class etc
        </member>
        <member name="T:NeoCortexApi.HtmSerializer.HtmJsonTextReder">
            Custom class that uses JsonTextReader to read Json files.
            Based on the position of the index Json Text Reader allocates Token Type and Values for the particular position in the Json file.
            This Custom reader reads the token type and states of the parameter and indicates current position from the standpoint of the Object. 
        </member>
        <member name="M:NeoCortexApi.HtmSerializer.Deserialize``1(System.String)">
            This method Deserializes the Json string based on the output of the Json Text Reader.
            The type of the property is fetched through Reflection and Creates an instance of the specified type.
            Lower level methods are called to set the values for the particular property
        </member>
        <member name="M:NeoCortexApi.HtmSerializer.ReadArray(System.Object,NeoCortexApi.HtmSerializer.HtmJsonTextReder,System.Type)">
            Reads the value form Json Reader for Array Types and cretaes instances
        </member>
        <member name="M:NeoCortexApi.HtmSerializer.GetPropertyName(NeoCortexApi.HtmSerializer.HtmJsonTextReder)">
            Identifies the name of the property from the Json string and returns the same
        </member>
        <member name="M:NeoCortexApi.HtmSerializer.SetMemberValue(System.Object,System.String,System.Object)">
            Fetches the type of the member and sets the property value of the specified object
        </member>
        <member name="M:NeoCortexApi.HtmSerializer.GetMemberType(System.String,System.Type,System.Reflection.MemberInfo@)">
            Uses Reflection to filter Fields and Properties and returns type of that particular attribute
        </member>
        <member name="T:NeoCortexApi.HtmSerializer2">
            Contains methods for Serialization and Deserialization and is applicable to Spatial Pooler and Temoral Memory Class
        </member>
        <member name="M:NeoCortexApi.HtmSerializer2.Serialize(System.Object,System.String)">
            Method for Serialization of an object. Can serialize properties and fields o the particular Object to 
            Can serialize properties and fields ofthe particular Object to a variable like String or a storage place like file.
        </member>
        <member name="M:NeoCortexApi.HtmSerializer2.Serialize(System.Object)">
            Stores and returns the serialized string value through this Stringbuilder.
            Uses Reflection API and lower level method SerializeMember() to fetch properties and fields of the object and stores the result in the Stringbuilder
        </member>
        <member name="M:NeoCortexApi.HtmSerializer2.SerializeMember(System.Boolean,System.Text.StringBuilder,System.Type,System.String,System.Object)">
            Obtains property and fields of the object by applying some of the lower level generic methods which are implemented in the subsequent section of this code.. 
            Different methods are applied based on specific attributes like types, type names etc.
            These conditions are applied to solve some of the complexities involved in Serializing complex classes within HTM
        </member>
        <member name="M:NeoCortexApi.HtmSerializer2.SerializeCustomType(System.Text.StringBuilder,System.String,System.Object)">
            Serialization Method for some of the specific classes. 
            Similar Serialization method is impplemented in thos concerned classes and the Serialize method can be invoked through this method in this class.
        </member>
        <member name="M:NeoCortexApi.HtmSerializer2.SerializeArray(System.Text.StringBuilder,System.String,System.Object)">
                     * Applied if the type of the concerned property/field is an Array 
                     
        </member>
        <member name="M:NeoCortexApi.HtmSerializer2.SerializeDictionary(System.Text.StringBuilder,System.String,System.Object)">
            Applied if the type of the concerned  property/field is a Dictionary
        </member>
        <member name="M:NeoCortexApi.HtmSerializer2.SerializeStringValue(System.Text.StringBuilder,System.String,System.String)">
            Returns the name of the particular Property and String value. Used for simple properties.
        </member>
        <member name="M:NeoCortexApi.HtmSerializer2.SerializeNumericValue(System.Text.StringBuilder,System.String,System.String)">
            Returns the name of the particular Property and Numeric value. 
        </member>
        <member name="M:NeoCortexApi.HtmSerializer2.AppendPropertyName(System.Text.StringBuilder,System.String)">
            Returns the name of the particular Property
        </member>
        <member name="M:NeoCortexApi.HtmSerializer2.SerializeComplexValue(System.Text.StringBuilder,System.String,System.Object)">
            Applied if the concerned  property/field involves Complex Types like class etc
        </member>
        <member name="T:NeoCortexApi.HtmSerializer2.HtmJsonTextReder">
            Custom class that uses JsonTextReader to read Json files.
            Based on the position of the index Json Text Reader allocates Token Type and Values for the particular position in the Json file.
            This Custom reader reads the token type and states of the parameter and indicates current position from the standpoint of the Object. 
        </member>
        <member name="M:NeoCortexApi.HtmSerializer2.Deserialize``1(System.String)">
            This method Deserializes the Json string based on the output of the Json Text Reader.
            The type of the property is fetched through Reflection and Creates an instance of the specified type.
            Lower level methods are called to set the values for the particular property
        </member>
        <member name="M:NeoCortexApi.HtmSerializer2.ReadArray(System.Object,NeoCortexApi.HtmSerializer2.HtmJsonTextReder,System.Type)">
            Reads the value form Json Reader for Array Types and cretaes instances
        </member>
        <member name="M:NeoCortexApi.HtmSerializer2.GetPropertyName(NeoCortexApi.HtmSerializer2.HtmJsonTextReder)">
            Identifies the name of the property from the Json string and returns the same
        </member>
        <member name="M:NeoCortexApi.HtmSerializer2.SetMemberValue(System.Object,System.String,System.Object)">
            Fetches the type of the member and sets the property value of the specified object
        </member>
        <member name="M:NeoCortexApi.HtmSerializer2.GetMemberType(System.String,System.Type,System.Reflection.MemberInfo@)">
            Uses Reflection to filter Fields and Properties and returns type of that particular attribute
        </member>
        <member name="T:NeoCortexApi.IComputeDecorator">
            <summary>
            Decorator interface for main algorithms .
            </summary>
        </member>
        <member name="M:NeoCortexApi.IComputeDecorator.Compute(NeoCortexApi.Entities.Connections,System.Int32[],System.Boolean)">
            <summary>
            Feeds input record through TM, performing inferencing and learning
            </summary>
            <param name="connections">the connection memory</param>
            <param name="activeColumns">direct activated column input</param>
            <param name="learn">learning mode flag</param>
            <returns><see cref="T:NeoCortexApi.Entities.ComputeCycle"/> container for one cycle of inference values.</returns>
        </member>
        <member name="M:NeoCortexApi.IComputeDecorator.Reset(NeoCortexApi.Entities.Connections)">
            <summary>
            Called to start the input of a new sequence, and reset the sequence state of the TM.
            </summary>
            <param name="connections">the Connections state of the temporal memory</param>
        </member>
        <member name="M:NeoCortexApi.MovingAverage.#ctor(System.Collections.Generic.List{System.Double},System.Int32)">
            <summary>
            Construct a new <see cref="T:NeoCortexApi.MovingAverage"/>
            </summary>
            <param name="historicalValues">list of entry values</param>
            <param name="windowSize">length over which to take the average</param>
        </member>
        <member name="M:NeoCortexApi.MovingAverage.#ctor(System.Collections.Generic.List{System.Double},System.Double,System.Int32)">
            <summary>
            Construct a new <see cref="T:NeoCortexApi.MovingAverage"/>
            </summary>
            <param name="historicalValues">list of entry values</param>
            <param name="windowSize">length over which to take the average</param>
            <exception cref="T:System.ArgumentException">Throws if <paramref name="windowSize"/> is less than 1</exception>
        </member>
        <member name="M:NeoCortexApi.MovingAverage.Compute(System.Collections.Generic.List{System.Double},System.Double,System.Double,System.Int32)">
            <summary>
            Routine for computing a moving average
            </summary>
            <param name="slidingWindow">a list of previous values to use in the computation that will be modified and returned</param>
            <param name="total">total the sum of the values in the  slidingWindow to be used in the calculation of the moving average</param>
            <param name="newVal">newVal a new number to compute the new windowed average</param>
            <param name="windowSize">windowSize how many values to use in the moving window</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.MovingAverage.Compute(NeoCortexApi.MovingAverage.Calculation,System.Collections.Generic.List{System.Double},System.Double,System.Double,System.Int32)">
            <summary>
            Internal method which does actual calculation
            </summary>
            <param name="calc">Re-used calculation object</param>
            <param name="slidingWindow">a list of previous values to use in the computation that will be modified and returned</param>
            <param name="total">total the sum of the values in the  slidingWindow to be used in the calculation of the moving average</param>
            <param name="newVal">newVal a new number to compute the new windowed average</param>
            <param name="windowSize">windowSize how many values to use in the moving window</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.MovingAverage.Next(System.Double)">
            <summary>
            Called to compute the next moving average value.
            </summary>
            <param name="newValue">new point data</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.MovingAverage.GetSlidingWindow">
            <summary>
            Returns the sliding window buffer used to calculate the moving average.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.MovingAverage.GetTotal">
            <summary>
            Returns the current running total
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.MovingAverage.GetWindowSize">
            <summary>
            Returns the size of the window over which the moving average is computed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.MovingAverage.GetHashCode">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.MovingAverage.CopyInto(NeoCortexApi.MovingAverage.Calculation,System.Collections.Generic.List{System.Double},System.Double,System.Double)">
            <summary>
            Internal method to update running totals.
            </summary>
            <param name="c"></param>
            <param name="slidingWindow"></param>
            <param name="average"></param>
            <param name="total"></param>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.MovingAverage.Calculation">
            <summary>
            Calculated data.
            </summary>
        </member>
        <member name="F:NeoCortexApi.MovingAverage.Calculation.Average">
            <summary>
            Returns the current value at this point in the calculation.
            </summary>
        </member>
        <member name="F:NeoCortexApi.MovingAverage.Calculation.HistoricalValues">
            <summary>
            Returns a list of calculated values in the order of their
            calculation.
            </summary>
        </member>
        <member name="F:NeoCortexApi.MovingAverage.Calculation.Total">
            <summary>
            Returns the total.
            </summary>
        </member>
        <member name="M:NeoCortexApi.MovingAverage.Calculation.GetHashCode">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.MovingAverage.Calculation.Equals(NeoCortexApi.MovingAverage.Calculation)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:NeoCortexApi.Network.CLAClassifier`1.alpha">
             <summary>
            The alpha used to compute running averages of the bucket duty
            cycles for each activation pattern bit.A lower alpha results
             in longer term memory.
             </summary>
        </member>
        <member name="F:NeoCortexApi.Network.CLAClassifier`1.learnIteration">
            <summary>
            The bit's learning iteration. This is updated each time store() gets called on this bit.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Network.CLAClassifier`1.recordNumMinusLearnIteration">
            <summary>
            This contains the offset between the recordNum (provided by caller) and learnIteration(internal only, always starts at 0).
            </summary>
        </member>
        <member name="F:NeoCortexApi.Network.CLAClassifier`1.maxBucketIdx">
             <summary>
            This contains the value of the highest bucket index we've ever seen
            It is used to pre-allocate fixed size arrays that hold the weights of
            each bucket index during inference
             </summary>
        </member>
        <member name="F:NeoCortexApi.Network.CLAClassifier`1.steps">
            <summary>
            The sequence different steps of multi-step predictions
            </summary>
        </member>
        <member name="F:NeoCortexApi.Network.CLAClassifier`1.patternNZHistory">
             <summary>
            History of the last _maxSteps activation patterns. We need to keep
            these so that we can associate the current iteration's classification
            with the activationPattern from N steps ago
             </summary>
        </member>
        <member name="F:NeoCortexApi.Network.CLAClassifier`1.activeBitHistory">
             <summary> 
            These are the bit histories.Each one is a BitHistory instance, stored in
            this dict, where the key is (bit, nSteps). The 'bit' is the index of the
            bit in the activation pattern and nSteps is the number of steps of
            prediction desired for that bit.
             </summary>
        </member>
        <member name="F:NeoCortexApi.Network.CLAClassifier`1.actualValues">
            <summary>
            This keeps track of the actual value to use for each bucket index. We
            start with 1 bucket, no actual value so that the first infer has something
            to return
            </summary>
        </member>
        <member name="M:NeoCortexApi.Network.CLAClassifier`1.Initialize(System.Collections.Generic.IList{System.Int32},System.Double,System.Double)">
             <summary>
             set up values from constructor and intialize global value 
             </summary>
             <param name="steps">sequence of the different steps of multi-step predictions to learn</param>
             <param name="alpha">The alpha used to compute running averages of the bucket duty
            cycles for each activation pattern bit.A lower alpha results
            in longer term memory.</param>
             <param name="actValueAlpha"></param>
        </member>
        <member name="M:NeoCortexApi.Network.CLAClassifier`1.IsNumericType(System.Object)">
            <summary>
            check the type of an instance is numeric type or not
            </summary>
            <param name="o">instance of an object</param>
            <returns>if numeric type returns true otherwise false</returns>
        </member>
        <member name="M:NeoCortexApi.Network.CLAClassifier`1.#ctor">
            <summary>
            Default constructor for setting up default data
            </summary>
        </member>
        <member name="M:NeoCortexApi.Network.CLAClassifier`1.#ctor(System.Collections.Generic.IList{System.Int32},System.Double,System.Double)">
             <summary>
             Constructor where value can be assigned
             </summary>
             <param name="steps">sequence of the different steps of multi-step predictions to learn</param>
             <param name="alpha">The alpha used to compute running averages of the bucket duty
            cycles for each activation pattern bit.A lower alpha results
            in longer term memory.</param>
             <param name="actValueAlpha"></param>
        </member>
        <member name="M:NeoCortexApi.Network.CLAClassifier`1.Compute(System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32[],System.Boolean,System.Boolean)">
            <summary>
            Method computes the result after the data is provided by the temporal memory and encoder
            </summary>
            <param name="recordNum">Record number of this input pattern. 
            Record numbers should normally increase sequentially by 1 each time unless there are missing records in the dataset.
            Knowing this information insures that we don't get confused by missing records.</param>
            <param name="classification">{@link Map} of the classification information:
            bucketIdx: index of the encoder bucket</param>
            <param name="patternNZ">list of the active indices from the output below</param>
            <param name="learn">if true, learn this sample</param>
            <param name="infer">if true, perform inference</param>
            <returns>ClassificationExperiment Object</returns>
        </member>
        <member name="F:NeoCortexApi.Network.CortexLayer`2.m_Results">
            <summary>
            Outputs of evey module in the pipeline.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Network.CortexLayer`2.GetResult(System.String)">
            <summary>
            Gets the result of the specific module inside of the layer's pipeline.
            </summary>
            <param name="moduleName"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Network.CortexLayer`2.Compute(`0,System.Boolean)">
            <summary>
            Computes over the pipeline of installed modules.
            </summary>
            <param name="input"></param>
            <param name="learn">FALSE: Infering mode, TRUE: Learning Mode.</param>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.Network.HtmClassifier`2">
            <summary>
            Classifier implementation which memorize all seen values.
            </summary>
            <typeparam name="TIN"></typeparam>
            <typeparam name="TOUT"></typeparam>
        </member>
        <member name="M:NeoCortexApi.Network.HtmClassifier`2.Learn(`0,NeoCortexApi.Entities.Cell[])">
            <summary>
            Assotiate specified input to the given set of predictive cells.
            </summary>
            <param name="input">Any kind of input.</param>
            <param name="output">The SDR of the input as calculated by SP.</param>
            <param name="predictedOutput"></param>
        </member>
        <member name="M:NeoCortexApi.Network.HtmClassifier`2.GetPredictedInputValue(NeoCortexApi.Entities.Cell[])">
            <summary>
            Gets predicted value for next cycle
            </summary>
            <param name="predictiveCells">The list of predictive cells.</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Network.HtmClassifier`2.TraceState(System.String)">
            <summary>
            Traces out all cell indicies grouped by input value.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Network.SdrClassifier`2.weightMatrix">
            <summary>
            Stores and updates the weight matrix, which is used in predicting the bucket number
            </summary>
        </member>
        <member name="F:NeoCortexApi.Network.SdrClassifier`2.patternNzHistory">
            <summary>
            Stores the patternHistory with respect to the iteration number
            e.g  1 : 1,2,3
                 2 : 1,3,4
                 3 : 1,2,5
            </summary>
        </member>
        <member name="F:NeoCortexApi.Network.SdrClassifier`2.bucketEntries">
            <summary>
            Stores the bucket number and its entries
            </summary>
        </member>
        <member name="M:NeoCortexApi.Network.SdrClassifier`2.#ctor">
            <summary>
            Represents the default constructor
            </summary>
        </member>
        <member name="M:NeoCortexApi.Network.SdrClassifier`2.#ctor(System.Double)">
            <summary>
            Represents the constructor in which we can alpha can be assigned.
            By default value is take as 0.001. This value can be changed in order to increase or decrease the learning process
            Larger the value of alpha less iteration are required to learn and vice-versa.
            NOTE: alpha value should always be greater than 0 in order to make the learning happen
            </summary>
            <param name = "alpha"> represents some random value given by the user</param>>
        </member>
        <member name="M:NeoCortexApi.Network.SdrClassifier`2.InitializeEntries">
            <summary>
            Initializes the global variables.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Network.SdrClassifier`2.Compute(System.Int32,System.Collections.Generic.List{System.Object},System.Int32[])">
            <summary>
            Method computes the result after the data is provided by the temporal memory.
            </summary>
            <param name="recordNum"> the nth number of the iteration </param>
            <param name = "classification"> represents list of object with 2 values one is bucket index and second is the actual value that came into the bucket
            This information is from the encoder itself and using this classifier checks the error. key is the bucket-index and value
            is the entry that went into the bucket</param>>
            <param name = "patternNz"> represents 1D array of the patterns. This input is from the temporal memory</param>>
        </member>
        <member name="M:NeoCortexApi.Network.SdrClassifier`2.Learn(System.Collections.Generic.List{System.Object})">
            <summary>
            Learns after the computation is done successfully.
            </summary>
            <param name = "classification"> represents list of object with 2 values one is bucket index and second is the actual value that came into the bucket
            </param>
        </member>
        <member name="M:NeoCortexApi.Network.SdrClassifier`2.Predict(System.Int32[])">
            <summary>
            Method predicts the result by informing us in which bucket we should check for this particular pattern.
            </summary>
            <param name = "patternNz"> This input parameter patternNz is the input from the temporal memory.
            Gives information about the number of active bits</param>
            <returns>1-d array containing the probabilities of the bucket indexes that can come for the next pattern.
            The bucket with the highest probability will be chosen for the next prediction</returns>
        </member>
        <member name="M:NeoCortexApi.Network.SdrClassifier`2.UpdateWeightMatrix(System.Collections.Generic.List{System.Object})">
            <summary>
            Updates the Weight Matrix after the error calculation is done
            </summary>
            <param name = "classification"> represents list of object with 2 values one is bucket index and second is the actual value that came into the bucket
            </param>
        </member>
        <member name="M:NeoCortexApi.Network.SdrClassifier`2.CalculateError(System.Collections.Generic.List{System.Object})">
            <summary>
            Method calculates the error
            </summary>
            <param name = "classification"> represents list of object with 2 values one is bucket index and second is the actual value that came into the bucket
            </param>
            <returns>1-d array of the errors calculated for each bucket.</returns>
        </member>
        <member name="M:NeoCortexApi.Network.SdrClassifier`2.inferSingleStep(System.Int32[])">
            <summary>
            Method infers the next step by using mathematical tool known as soft max normalization.
            </summary>
            <param name = "patternNz"> represents 1-D array</param>>
            <returns>1-d array containing the prediction results after soft max normalization has been done</returns>
        </member>
        <member name="M:NeoCortexApi.Network.SdrClassifier`2.GrowMatrixUptoMaximumInput(System.Int32)">
            <summary>
            Increases the columns of the weight matrix. This should be matched with the number of active bits/ active pattern
            as per the temporal memory.
            </summary>
            <param name = "newMaxInputIdx"> maximum index value used by the temporal memory while forming active patterns</param>>
        </member>
        <member name="M:NeoCortexApi.Network.SdrClassifier`2.AddZeros(System.Int32,System.Int32,System.Collections.Generic.List{System.Object})">
            <summary>
            Initializes the weight matrix with 0 values
            </summary>
            <param name="startingPoint"> represents the starting point of the matrix </param>>
            <param name="endingPoint"> represents the ending point of the matrix </param>>
            <param name="list"> represents the list of the object </param>>
        </member>
        <member name="M:NeoCortexApi.Network.SdrClassifier`2.AddBucketsToWeightMatrix(System.Int32)">
            <summary>
            Increases the number of rows of the weight matrix in order to match with the maximum bucket index used by the encoder
            </summary>
            <param name="bucketIdx"> bucket index used by the encoder</param>
        </member>
        <member name="M:NeoCortexApi.Network.SdrClassifier`2.UpdateBucketEntries(System.Int32,System.Object)">
            <summary>
            Updates the bucket index with the actual value.
            This is our internal bucket entries stored which can be used to predict the values
            </summary>
            <param name="bucketIdx"> bucket index used by the encoder</param>
            <param name="actValue"> actual value set by the encoder</param>
        </member>
        <member name="M:NeoCortexApi.Network.SdrClassifier`2.PerformSoftMaxNormalization(System.Double[],System.Double[])">
            <summary>
            Performs SoftMaxNormalization using mathematical formulas.
            </summary>
            <param name="outputActivation"> represents 1D array of output activation</param>
            <param name="predictDist"> represents 1D array of predicted distribution</param>
        </member>
        <member name="M:NeoCortexApi.Network.SdrClassifier`2.PrintWeightMatrix">
            <summary>
            Prints the weight Matrix
            </summary>
        </member>
        <member name="T:NeoCortexApi.Network.CortexNetworkContext">
            <summary>
            Holds general context information.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Network.CortexNetworkContext.Encoders">
            <summary>
            Gets all available encoders.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Network.CortexNetworkContext.#ctor">
            <summary>
            Loads all implemented encoders in all load assemblies.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Network.CortexNetworkContext.CreateEncoder(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates the encoder instance from specified set of properties.
            </summary>
            <param name="encoderSettings"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Network.CortexNetworkContext.CreateEncoder(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates the encoder instance from specified set of properties.
            </summary>
            <param name="encoderType">Assembly qualified name of the encoder.</param>
            <param name="encoderSettings">List of all required parameters for encoder. 
            If encoder has already been created, this argument SHOULD be null.</param>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.IDataDescriptor">
            <summary>
            Holds all required data, which is passed to all pipeline
            component.
            </summary>
        </member>
        <member name="P:NeoCortexApi.IDataDescriptor.LabelIndex">
            <summary>
            Index of the label. If there are more than one label (multiclass classifier), this is the index of the first one.
            </summary>
        </member>
        <member name="T:NeoCortexApi.DataDescriptor">
            <summary>
            Implements Meta Data information about Training or Testing data. 
            The class also defined which problem type LearningAPI can solve.
            </summary>
        </member>
        <member name="P:NeoCortexApi.DataDescriptor.LabelIndex">
            <summary>
            Index of the Column in RealData pointing to the Labeled column.
            </summary>
        </member>
        <member name="P:NeoCortexApi.DataDescriptor.Features">
             <summary>
            array of feature which play role in training 
             </summary>
        </member>
        <member name="T:NeoCortexApi.DataMappers.DataMapper">
            <summary>
            Class for asigning set of properties for each feature (data column)
            </summary>
        </member>
        <member name="P:NeoCortexApi.DataMappers.DataMapper.InputWidth">
            <summary>
            Width of input across of all encoders.
            </summary>
        </member>
        <member name="M:NeoCortexApi.DataMappers.DataMapper.#ctor(NeoCortexApi.DataDescriptor,NeoCortexApi.Network.CortexNetworkContext)">
            <summary>
            Main constructor
            </summary>
        </member>
        <member name="M:NeoCortexApi.DataMappers.DataMapper.Run(System.Object[])">
            <summary>
            Transform the featureVector from natural format in to double format. 
            ** AFTER MAPPING:  'LABEL COLUMN IS THE LAST ELEMENT IN ARRAY'**
            </summary>
            <param name="rawData"></param>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.DataMappers.Column">
            <summary>
            Implementation of the data column used in Data Mapper 
            </summary>
        </member>
        <member name="P:NeoCortexApi.DataMappers.Column.Id">
            <summary>
            Feature Id. Features are sorted by this property
            </summary>
        </member>
        <member name="P:NeoCortexApi.DataMappers.Column.Name">
            <summary>
            Feature (Column) name
            </summary>
        </member>
        <member name="P:NeoCortexApi.DataMappers.Column.Index">
            <summary>
            Feature position in trainData/testData
            </summary>
        </member>
        <member name="P:NeoCortexApi.DataMappers.Column.EncoderSettings">
            <summary>
            Assembly qualified name of the column encoder. If specified, encoder is used for encoding of the value.
            </summary>
        </member>
        <member name="P:NeoCortexApi.DataMappers.Column.Encoder">
            <summary>
            Instance of encoder used for this column.
            </summary>
        </member>
        <member name="P:NeoCortexApi.DataMappers.Column.Values">
            <summary>
            In case of binary and Category type, values represent class values enumerated in ascedenting order
            binary:
            {false,true} - mean: 0->false, 1->true
            {no, yes}; - mean: 0->no, 1->yes  
            {0, 1}; - mean: 0->0, 1->1
            
            multiclass: 1->n representation 
            {Red, Green, Blue}; - mean: (Red=0, Green=1, Blue=2) normalized values: Red-> (1,0,0), Green ->(0,1,0), Blue ->(0,0,1) 
            </summary>
        </member>
        <member name="P:NeoCortexApi.DataMappers.Column.DefaultMissingValue">
            <summary>
            Replaces the missing value in the cell
            </summary>
        </member>
        <member name="T:NeoCortexApi.DataMappers.ResultMapping">
            <summary>
            
            </summary>
        </member>
        <member name="T:NeoCortexApi.SpatialPooler">
            <summary>
            Handles the relationships between the columns of a region and the inputs bits. The primary public interface to this function is the 
            "compute" method, which takes in an input vector and returns a list of activeColumns columns.<br/>
            Example Usage:<br/>
            ><br/>
            > SpatialPooler sp = SpatialPooler();<br/>
            > Connections c = new Connections();<br/>
            > sp.Init(c);<br/>
            > for line in file:<br/>
            >   inputVector = prepared int[] (containing 1's and 0's)<br/>
            >   sp.compute(inputVector)<br/>
            </summary>
            <remarks>
            Author David Ray, Damir Dobric
            </remarks>
            <summary>
            Spatial Pooler algorithm. Single-threaded version.
            Original version by David Ray, migrated from HTM JAVA. Over time, more and more code has been changed.
            </summary>
        </member>
        <member name="F:NeoCortexApi.SpatialPooler.m_HomeoPlastAct">
            <summary>
            The instance of the <see cref="T:NeoCortexApi.HomeostaticPlasticityController"/>.
            </summary>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.#ctor(NeoCortexApi.HomeostaticPlasticityController)">
            <summary>
            Default constructor.
            </summary>
            <param name="homeostaticPlasticityActivator">Includes the newborn effect in the SP. This feture was not a part of SP in the original version.</param>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.Init(NeoCortexApi.Entities.Connections,NeoCortexApi.Entities.DistributedMemory)">
            <summary>
            Initializes the Spatial Pooler algorithm.
            </summary>
            <param name="c">The HTM memory instance.</param>
            <param name="distMem"></param>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.InitMatrices(NeoCortexApi.Entities.Connections,NeoCortexApi.Entities.DistributedMemory)">
            <summary>
            Called to initialize the structural anatomy with configured values and prepare
            the anatomical entities for activation.
            </summary>
            <param name="c"></param>
            <param name="distMem"></param>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.ConnectAndConfigureInputs(NeoCortexApi.Entities.Connections)">
            <summary>
            Implements single threaded (originally based on JAVA implementation) initialization of SP.
            It creates columns, initializes the pool of potentially connected synapses on ProximalDendrites and
            set initial permanences for every column.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.Compute(System.Int32[],System.Int32[],System.Boolean)">
            <summary>
            Performs SpatialPooler compute algorithm.
            </summary>
            <param name="input">Input vector</param>
            <param name="activeArray">The column array with computed SDR code.</param>
            <param name="learn">Learn or Predict.</param>
            <returns>Indicies of active columns.</returns>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.Compute(System.Int32[],System.Boolean)">
            <summary>
            Performs SpatialPooler compute algorithm.
            </summary>
            <param name="input">Input vector</param>
            <param name="learn">Learn or Predict.</param>
            <returns>Indicies of active columns.</returns>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.Compute(System.Int32[],System.Boolean,System.Boolean)">
            <summary>
            Performs SPatialPooler compute algorithm.
            </summary>
            <param name="input">Input vector</param>
            <param name="learn">Learn or Predict.</param>
            <param name="returnActiveColIndiciesOnly">If set on TRUE indicies of active columns are returned (sparse array of active columns).
            If FALSE, dense aray of all coulmns is returned.</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.compute(System.Int32[],System.Int32[],System.Boolean)">
            <summary>
            This is the primary public method of the SpatialPooler class. This function takes a input vector and outputs the indices of the active columns.
            If 'learn' is set to True, this method also updates the permanences of the columns. 
            </summary>
            <param name="inputVector">
            An array of 0's and 1's that comprises the input to the spatial pooler. The array will be treated as a one dimensional array, therefore the dimensions 
            of the array do not have to match the exact dimensions specified in the class constructor. In fact, even a list would suffice. The number of input bits 
            in the vector must, however, match the number of bits specified by the call to the constructor. Therefore there must be a '0' or '1' in the array for 
            every input bit.
            </param>
            <param name="activeArray">
            An array whose size is equal to the number of columns. Before the function returns this array will be populated with 1's at the indices of the active 
            columns, and 0's everywhere else.
            </param>
            <param name="learn">
            A boolean value indicating whether learning should be performed. Learning entails updating the  permanence values of the synapses, and hence modifying 
            the 'state' of the model. Setting learning to 'off' freezes the SP and has many uses. For example, you might want to feed in various inputs and examine 
            the resulting SDR's.
            </param>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.StripUnlearnedColumns(NeoCortexApi.Entities.Connections,System.Int32[])">
            <summary>
            Removes the set of columns who have never been active from the set of active columns selected in the inhibition round. Such columns cannot
            represent learned pattern and are therefore meaningless if only inference is required. This should not be done when using a random, unlearned SP
            since you would end up with no active columns.
            </summary>
            <param name="c"></param>
            <param name="activeColumns">An array containing the indices of the active columns</param>
            <returns>a list of columns with a chance of activation</returns>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.UpdateMinDutyCycles(NeoCortexApi.Entities.Connections)">
            <summary>
            Updates the minimum duty cycles defining normal activity for a column. A column with activity duty cycle below this minimum threshold is boosted.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.UpdateMinDutyCyclesGlobal(NeoCortexApi.Entities.Connections)">
            <summary>
            Updates the minimum duty cycles in a global fashion. Sets the minimum duty cycles for the overlap and activation of all columns to be a percent of 
            the maximum in the region, specified by {@link Connections#getMinOverlapDutyCycles()} and minPctActiveDutyCycle respectively. Functionality it is 
            equivalent to <see cref="M:NeoCortexApi.SpatialPooler.UpdateMinDutyCyclesLocal(NeoCortexApi.Entities.Connections)"/>, but this function exploits the globalness of the computation to perform it in a 
            straightforward, and more efficient manner.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.GetColumnNeighborhood(NeoCortexApi.Entities.Connections,System.Int32,System.Int32)">
            <summary>
            Gets a neighborhood of columns.
            Simply calls topology.neighborhood or topology.wrappingNeighborhood
            A subclass can insert different topology behavior by overriding this method.
            </summary>
            <param name="c">the <see cref="T:NeoCortexApi.Entities.Connections"/> memory encapsulation</param>
            <param name="centerColumn">The center of the neighborhood.</param>
            <param name="inhibitionRadius">Span of columns included in each neighborhood</param>
            <returns>The columns in the neighborhood (1D)</returns>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.UpdateMinDutyCyclesLocal(NeoCortexApi.Entities.Connections)">
            <summary>
            Updates the minimum duty cycles. The minimum duty cycles are determined locally. Each column's minimum duty cycles are set to be a percent of the 
            maximum duty cycles in the column's neighborhood. Unlike <see cref="M:NeoCortexApi.SpatialPooler.UpdateMinDutyCyclesGlobal(NeoCortexApi.Entities.Connections)"/>, here the values can be quite different 
            for different columns.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.UpdateDutyCycles(NeoCortexApi.Entities.Connections,System.Int32[],System.Int32[])">
            <summary>
            Updates the duty cycles for each column. The OVERLAP duty cycle is a moving average of the number of inputs which overlapped with each column.
            The ACTIVITY duty cycles is a moving average of the frequency of activation for each column.
            </summary>
            <param name="c">the <see cref="T:NeoCortexApi.Entities.Connections"/> (spatial pooler memory)</param>
            <param name="overlaps">
            an array containing the overlap score for each column. The overlap score for a column is defined as the number of synapses in a "connected state"
            (connected synapses) that are connected to input bits which are turned on.
            </param>
            <param name="activeColumns">
            An array containing the indices of the active columns, the sparse set of columns which survived inhibition
            </param>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.UpdateDutyCyclesHelper(NeoCortexApi.Entities.Connections,System.Double[],System.Double[],System.Double)">
            <summary>
            Updates a duty cycle estimate with a new value. This is a helper function that is used to update several duty cycle variables in
            the Column class, such as: overlapDutyCucle, activeDutyCycle, minPctDutyCycleBeforeInh, minPctDutyCycleAfterInh, etc. returns
            the updated duty cycle. Duty cycles are updated according to the following formula: <br/>
            
             
                           (period - 1)*dutyCycle + newValue<br/>
             dutyCycle := ----------------------------------<br/>
                                   period<br/>
            </summary>
            <param name="c">the <see cref="T:NeoCortexApi.Entities.Connections"/> (spatial pooler memory)</param>
            <param name="dutyCycles">An array containing one or more duty cycle values that need to be updated</param>
            <param name="newInput">A new numerical value used to update the duty cycle. Typically 1 or 0</param>
            <param name="period">The period of the duty cycle</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.UpdateInhibitionRadius(NeoCortexApi.Entities.Connections,System.Collections.Generic.List{System.Double})">
            <summary>
            Update the inhibition radius. The inhibition radius is a measure of the square (or hypersquare) of columns that each a column is "connected to"
            on average. Since columns are not connected to each other directly, we determine this quantity by first figuring out how many *inputs* a column is
            connected to, and then multiplying it by the total number of columns that exist for each input. For multiple dimension the aforementioned
            calculations are averaged over all dimensions of inputs and columns. This value is meaningless if global inhibition is enabled.
            </summary>
            <param name="c">the <see cref="T:NeoCortexApi.Entities.Connections"/> (spatial pooler memory)</param>
            <param name="avgCollected"></param>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.CalcAvgColumnsPerInput(NeoCortexApi.Entities.Connections)">
            <summary>
            It calculates ratio numOfCols/numOfInputs for every dimension.This value is used to calculate the inhibition radius.
            </summary>
            <param name="c"></param>
            <returns>Average ratio numOfCols/numOfInputs across all dimensions.</returns>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.GetAvgSpanOfConnectedSynapses(NeoCortexApi.Entities.Connections,System.Int32)">
            The range of connectedSynapses per column, averaged for each dimension.
            This value is used to calculate the inhibition radius. This variation of
            the function supports arbitrary column dimensions.
             
            @param c             the {@link Connections} (spatial pooler memory)
            @param columnIndex   the current column for which to avg.
            @return
            <summary>
            It traverses all connected synapses of the column and calculates the span, which synapses
            span between all input bits. Then it calculates average of spans accross all dimensions. 
            </summary>
            <param name="c"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.AdaptSynapses(NeoCortexApi.Entities.Connections,System.Int32[],System.Int32[])">
            <summary>
            The primary method in charge of learning. Adapts the permanence values of the synapses based on the input vector, 
            and the chosen columns after inhibition round. Permanence values are increased for synapses connected to input bits
            that are turned on, and decreased for synapses connected to inputs bits that are turned off.
            </summary>
            <param name="c">the <see cref="T:NeoCortexApi.Entities.Connections"/> (spatial pooler memory)</param>
            <param name="inputVector">a integer array that comprises the input to the spatial pooler. There exists an entry in the array for every input bit.</param>
            <param name="activeColumns">an array containing the indices of the columns that survived inhibition.</param>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.BumpUpWeakColumns(NeoCortexApi.Entities.Connections)">
            <summary>
            This method increases the permanence values of synapses of columns whose 
            activity level has been too low. Such columns are identified by having an 
            overlap duty cycle that drops too much below those of their peers. The 
            permanence values for such columns are increased. 
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.RaisePermanenceToThreshold(NeoCortexApi.Entities.HtmConfig,System.Double[],System.Int32[])">
            <summary>
            This method ensures that each column has enough connections to input bits to allow it to become active. 
            Since a column must have at least 'stimulusThreshold' overlaps in order to be considered during the inhibition phase,
            columns without such minimal number of connections, even if all the input bits they are connected to turn on, 
            have no chance of obtaining the minimum threshold. For such columns, the permanence values are increased until 
            the minimum number of connections are formed.
            </summary>
            <param name="htmConfig"></param>
            <param name="perm">the permanence values</param>
            <param name="maskPotential"></param>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.RaisePermanenceToThresholdSparse(NeoCortexApi.Entities.Connections,System.Double[])">
            <summary>
            This method ensures that each column has enough connections to input bits to allow it to become active. 
            Since a column must have at least 'stimulusThreshold' overlaps in order to be considered during the inhibition phase, 
            columns without such minimal number of connections, even if all the input bits they are connected to turn on, 
            have no chance of obtaining the minimum threshold. For such columns, the permanence values are increased until 
            the minimum number of connections are formed.
            </summary>
            <param name="c">the <see cref="T:NeoCortexApi.Entities.Connections"/> memory</param>
            <param name="perm">permanence values</param>
            <remarks>Note: This method services the "sparse" versions of corresponding methods</remarks>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.UpdatePermanencesForColumnSparse(NeoCortexApi.Entities.Connections,System.Double[],NeoCortexApi.Entities.Column,System.Int32[],System.Boolean)">
            <summary>
            This method updates the permanence matrix with a column's new permanence values. The column is identified by its index,
            which reflects the row in the matrix, and the permanence is given in 'sparse' form, (i.e. an array whose members are 
            associated with specific indexes). It is in charge of implementing 'clipping' - ensuring that the permanence values are
            always between 0 and 1 - and 'trimming' - enforcing sparseness by zeroing out all permanence values below 'synPermTrimThreshold'.
            Every method wishing to modify the permanence matrix should do so through this method.
            </summary>
            <param name="c">the <see cref="T:NeoCortexApi.Entities.Connections"/> which is the memory model.</param>
            <param name="perm">
            An array of permanence values for a column. The array is "sparse", i.e. it contains an entry for each input bit, even if 
            the permanence value is 0.
            </param>
            <param name="column">The column in the permanence, potential and connectivity matrices</param>
            <param name="maskPotential"></param>
            <param name="raisePerm">a boolean value indicating whether the permanence values</param>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.CalcInhibitionDensity(NeoCortexApi.Entities.Connections)">
            **
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.InhibitColumns(NeoCortexApi.Entities.Connections,System.Double[])">
            <summary>
            Performs inhibition. This method calculates the necessary values needed to actually perform inhibition and then delegates
            the task of picking the active columns to helper functions.
            </summary>
            <param name="c">the <see cref="T:NeoCortexApi.Entities.Connections"/> matrix</param>
            <param name="initialOverlaps">
            an array containing the overlap score for each column. The overlap score for a column is defined as the number of synapses
            in a "connected state" (connected synapses) that are connected to input bits which are turned on.
            </param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.InhibitColumnsGlobal(NeoCortexApi.Entities.Connections,System.Double[],System.Double)">
            <summary>
             Perform global inhibition. Performing global inhibition entails picking the
             top 'numActive' columns with the highest overlap score in the entire</summary>
             region. At most half of the columns in a local neighborhood are allowed to
             be active.
            <param name="c">Connections (memory)</param>
            <param name="overlaps">An array containing the overlap score for each  column.</param>
            <param name="density"> The fraction of the overlap score for a column is defined as the numbern of columns to survive inhibition.</param>
            <returns>We return all columns, of synapses in a "connected state" (connected synapses) that have overlap greather than stimulusThreshold.</returns>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.InhibitColumnsLocalOriginal(NeoCortexApi.Entities.Connections,System.Double[],System.Double)">
            <summary>
            Implements the local inhibition algorithm. 
            This method calculates the necessary values needed to actually perform inhibition and then delegates
            the task of picking the active columns to helper functions.
            </summary>
            <param name="mem">the <see cref="T:NeoCortexApi.Entities.Connections"/> matrix</param>
            <param name="overlaps">
            an array containing the overlap score for each  column. The overlap score for a column is defined as the number of synapses
            in a "connected state" (connected synapses) that are connected to input bits which are turned on.
            </param>
            <param name="density">
            The fraction of columns to survive inhibition. This value is only an intended target. Since the surviving columns are picked
            in a local fashion, the exact fraction of surviving columns is likely to vary.
            </param>
            <returns>indices of the winning columns</returns>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.UpdateBoostFactors(NeoCortexApi.Entities.Connections)">
            <summary>
            Update the boost factors for all columns. The boost factors are used to increase the overlap of inactive columns to improve
            their chances of becoming active. and hence encourage participation of more columns in the learning process. This is a line defined as: 
            y = mx + b 
            boost = (1-maxBoost)/minDuty * activeDutyCycle + maxBoost. 
            Intuitively this means that columns that have been active enough have a boost factor of 1, meaning their overlap is not boosted.
            Columns whose active duty cycle drops too much below that of their neighbors are boosted depending on how infrequently they 
            have been active. The more infrequent, the more they are boosted. The exact boost factor is linearly interpolated between the points
            (dutyCycle:0, boost:maxFiringBoost) and (dutyCycle:minDuty, boost:1.0).
            
                    boostFactor
                        ^
            maxBoost _  |
                        |\
                        | \
                  1  _  |  \ _ _ _ _ _ _ _
                        |
                        +--------------------> activeDutyCycle
                           |
                    minActiveDutyCycle
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.CalculateOverlap(NeoCortexApi.Entities.Connections,System.Int32[])">
            <summary>
            This function determines each column's overlap with the current input
            vector.The overlap of a column is the number of synapses for that column)
            to input bits which are turned on.Overlap values that are lower than
            the 'stimulusThreshold' are ignored.The implementation takes advantage of
            the SpraseBinaryMatrix class to perform this calculation efficiently.
            </summary>
            <param name="c"></param>
            <param name="inputVector"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.CalculateOverlapPct(NeoCortexApi.Entities.Connections,System.Int32[])">
            <summary>
            Return the overlap to connected counts ratio for a given column
            </summary>
            <param name="c"></param>
            <param name="overlaps"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.SpatialPooler.IsUpdateRound(NeoCortexApi.Entities.Connections)">
            <summary>
            Returns true if enough rounds have passed to warrant updates of duty cycles
            </summary>
            <param name="c">the <see cref="T:NeoCortexApi.Entities.Connections"/> memory encapsulation</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoCortexApi.SpatialPooler.UpdateBookeepingVars(NeoCortexApi.Entities.Connections,System.Boolean)" -->
        <member name="M:NeoCortexApi.SpatialPoolerMT.InitMatrices(NeoCortexApi.Entities.Connections,NeoCortexApi.Entities.DistributedMemory)">
            <summary>
            Uses the same implementation as Single-Threaded.
            </summary>
            <param name="c"></param>
            <param name="distMem"></param>
        </member>
        <member name="M:NeoCortexApi.SpatialPoolerMT.ConnectAndConfigureInputs(NeoCortexApi.Entities.Connections)">
            <summary>
            Implements muticore initialization of pooler.
            </summary>
            <param name="c"></param>
        </member>
        <member name="T:NeoCortexApi.SpatialPoolerParallel">
            <summary>
            The parallel version of the SP on to of the actor model.
            </summary>
        </member>
        <member name="M:NeoCortexApi.SpatialPoolerParallel.InitMatrices(NeoCortexApi.Entities.Connections,NeoCortexApi.Entities.DistributedMemory)">
            <summary>
            Performs the remote initialization ot the SP on actor nodes.
            </summary>
            <param name="c"></param>
            <param name="distMem"></param>
        </member>
        <member name="M:NeoCortexApi.SpatialPoolerParallel.ConnectAndConfigureInputs(NeoCortexApi.Entities.Connections)">
            <summary>
            Implements muticore initialization of pooler.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:NeoCortexApi.SpatialPoolerParallel.CalculateOverlap(NeoCortexApi.Entities.Connections,System.Int32[])">
            <summary>
            Starts distributed calculation of overlaps.
            </summary>
            <param name="c"></param>
            <param name="inputVector">Overlap of every column.</param>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.TemporalMemory">
            <summary>
            Implementation of Temporal Memory algorithm.
            </summary>
        </member>
        <member name="M:NeoCortexApi.TemporalMemory.Init(NeoCortexApi.Entities.Connections)">
            <summary>
            Uses the specified <see cref="T:NeoCortexApi.Entities.Connections"/> object to Build the structural  anatomy needed by this <see cref="T:NeoCortexApi.TemporalMemory"/> 
            to implement its algorithms.<br/>
            
            The connections object holds the <see cref="T:NeoCortexApi.Entities.Column"/> and <see cref="T:NeoCortexApi.Entities.Cell"/> infrastructure, and is used by both the <see cref="T:NeoCortexApi.SpatialPooler"/>
            and <see cref="T:NeoCortexApi.TemporalMemory"/>. Either of these can be used separately, and therefore this Connections object may have its <see cref="T:NeoCortexApi.Entities.Column"/>s 
            and <see cref="T:NeoCortexApi.Entities.Cell"/>s initialized by either the init method of the <see cref="T:NeoCortexApi.SpatialPooler"/> or the init method of the <see cref="T:NeoCortexApi.TemporalMemory"/>. 
            We check for this so that complete initialization of both <see cref="T:NeoCortexApi.Entities.Column"/>s and <see cref="T:NeoCortexApi.Entities.Cell"/>s occurs, without either being redundant
            (initialized more than once). However, <see cref="T:NeoCortexApi.Entities.Cell"/>s only get created when initializing a <see cref="T:NeoCortexApi.TemporalMemory"/>, because 
            they are not used by the <see cref="T:NeoCortexApi.SpatialPooler"/>.
            </summary>
            <param name="conn"><see cref="T:NeoCortexApi.Entities.Connections"/> object</param>
        </member>
        <member name="M:NeoCortexApi.TemporalMemory.Compute(System.Int32[],System.Boolean)">
            <summary>
            Performs the whole calculation of Temporal memory algorithm.
            Calculation takes two parts:
            <list type="number">
            <item>Calculation of the cells, which become active in the current cycle.</item>
            <item>Calculation of dendrite segments which becom active in the current cycle.</item>
            </list>
            </summary>
            <param name="activeColumns"></param>
            <param name="learn"></param>
            <returns></returns>
            <remarks>Note: PredictiveCells are not calculated here. They are calculated on demand from active segments.</remarks>
        </member>
        <member name="M:NeoCortexApi.TemporalMemory.ActivateCells(NeoCortexApi.Entities.Connections,System.Int32[],System.Boolean)">
            <summary>
            Calculate the active cells, using the current active columns and dendrite segments. Grow and reinforce synapses.
            
            <para>
            Pseudocode:<br/>
              for each column<br/>
                if column is active and has active distal dendrite segments<br/>
                  call activatePredictedColumn<br/>
                if column is active and doesn't have active distal dendrite segments<br/>
                  call burstColumn<br/>
                if column is inactive and has matching distal dendrite segments<br/>
                  call punishPredictedColumn<br/>
            </para>
            </summary>
            <param name="conn"></param>
            <param name="activeColumnIndices"></param>
            <param name="learn"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.TemporalMemory.ActivateDendrites(NeoCortexApi.Entities.Connections,NeoCortexApi.Entities.ComputeCycle,System.Boolean)">
            <summary>
            Calculate dendrite segment activity, using the current active cells.
            
            <para>
            Pseudocode:<br/>
              for each distal dendrite segment with number of active synapses >= activationThreshold<br/>
                mark the segment as active<br/>
              for each distal dendrite segment with unconnected activity >= minThreshold<br/>
                mark the segment as matching<br/>
            </para>
            </summary>
            <param name="conn">the Connectivity</param>
            <param name="cycle">Stores current compute cycle results</param>
            <param name="learn">If true, segment activations will be recorded. This information is used during segment cleanup.</param>
        </member>
        <member name="M:NeoCortexApi.TemporalMemory.Reset(NeoCortexApi.Entities.Connections)">
            <summary>
            Indicates the start of a new sequence. 
            Clears any predictions and makes sure synapses don't grow to the currently active cells in the next time step.
            </summary>
            <param name="connections"></param>
        </member>
        <member name="M:NeoCortexApi.TemporalMemory.ActivatePredictedColumn(NeoCortexApi.Entities.Connections,System.Collections.Generic.List{NeoCortexApi.Entities.DistalDendrite},System.Collections.Generic.List{NeoCortexApi.Entities.DistalDendrite},System.Collections.Generic.ICollection{NeoCortexApi.Entities.Cell},System.Collections.Generic.ICollection{NeoCortexApi.Entities.Cell},System.Double,System.Double,System.Boolean,System.Collections.Generic.IList{NeoCortexApi.Entities.Synapse})">
            Determines which cells in a predicted column should be added to winner cells
            list, and learns on the segments that correctly predicted this column.
            
            @param conn                 the connections
            @param activeSegments       Active segments in the specified column
            @param matchingSegments     Matching segments in the specified column
            @param prevActiveCells      Active cells in `t-1`
            @param prevWinnerCells      Winner cells in `t-1`
            @param learn                If true, grow and reinforce synapses
            
            <pre>
            Pseudocode:
              for each cell in the column that has an active distal dendrite segment
                mark the cell as active
                mark the cell as a winner cell
                (learning) for each active distal dendrite segment
                  strengthen active synapses
                  weaken inactive synapses
                  grow synapses to previous winner cells
            </pre>
            
            @return A list of predicted cells that will be added to active cells and winner
                    cells.
            <summary>
            TM acitivates segments on the column in the previous cycle. This method locates such segments and 
            adapts them. 
            </summary>
            <param name="conn"></param>
            <param name="columnActiveSegments">Active segments as calculated (activated) in the previous step.</param>
            <param name="matchingSegments"></param>
            <param name="prevActiveCells">Cells active in the current cycle.</param>
            <param name="prevWinnerCells"></param>
            <param name="permanenceIncrement"></param>
            <param name="permanenceDecrement"></param>
            <param name="learn"></param>
            <returns>Cells which own active column segments as calculated in the previous step.</returns>
        </member>
        <member name="M:NeoCortexApi.TemporalMemory.BurstColumn(NeoCortexApi.Entities.Connections,NeoCortexApi.Entities.Column,System.Collections.Generic.List{NeoCortexApi.Entities.DistalDendrite},System.Collections.Generic.ICollection{NeoCortexApi.Entities.Cell},System.Collections.Generic.ICollection{NeoCortexApi.Entities.Cell},System.Double,System.Double,System.Random,System.Boolean)">
            <summary>
            Activates all of the cells in an unpredicted active column,
            chooses a winner cell, and, if learning is turned on, either adapts or
            creates a segment. growSynapses is invoked on this segment.<br/>
            <para>
            <b>Pseudocode:</b><br/>
             mark all cells as active<br/>
             if there are any matching distal dendrite segments<br/>
                 find the most active matching segment<br/>
                 mark its cell as a winner cell<br/>
                 (learning)<br/>
                 grow and reinforce synapses to previous winner cells<br/>
             else<br/>
                 find the cell with the least segments, mark it as a winner cell<br/>
                 (learning)<br/>
                 (optimization) if there are previous winner cells<br/>
                     add a segment to this winner cell<br/>
                     grow synapses to previous winner cells<br/>
            </para>
            </summary>
            <param name="conn">Connections instance for the TM</param>
            <param name="column">Bursting <see cref="T:NeoCortexApi.Entities.Column"/></param>
            <param name="matchingSegments">List of matching <see cref="T:NeoCortexApi.Entities.DistalDendrite"/>s</param>
            <param name="prevActiveCells">Active cells in `t-1`</param>
            <param name="prevWinnerCells">Winner cells in `t-1`</param>
            <param name="permanenceIncrement">Amount by which permanences of synapses are decremented during learning</param>
            <param name="permanenceDecrement">Amount by which permanences of synapses are incremented during learning</param>
            <param name="random">Random number generator</param>
            <param name="learn">Whether or not learning is enabled</param>
            <returns>
            <see cref="T:NeoCortexApi.Entities.BurstingResult"/> contains two properties:<br/>
            <see cref="P:NeoCortexApi.Entities.BurstingResult.Cells"/>:      list of the processed column's cells<br/>
            <see cref="P:NeoCortexApi.Entities.BurstingResult.BestCell"/>:    the best cell
            </returns>
        </member>
        <member name="M:NeoCortexApi.TemporalMemory.GetSegmentwithHighesPotential(NeoCortexApi.Entities.Connections,System.Collections.Generic.List{NeoCortexApi.Entities.DistalDendrite},System.Collections.Generic.ICollection{NeoCortexApi.Entities.Cell})">
            <summary>
            Gets the segment with maximal potential. Segment's potential is measured by number of potential synapses.
            </summary>
            <param name="conn"></param>
            <param name="matchingSegments"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.TemporalMemory.PunishPredictedColumn(NeoCortexApi.Entities.Connections,System.Collections.Generic.List{NeoCortexApi.Entities.DistalDendrite},System.Collections.Generic.List{NeoCortexApi.Entities.DistalDendrite},System.Collections.Generic.ICollection{NeoCortexApi.Entities.Cell},System.Collections.Generic.ICollection{NeoCortexApi.Entities.Cell},System.Double)">
            <summary>
            Punishes the Segments that incorrectly predicted a column to be active.
            <para>
            Pseudocode:<br/>
             for each matching segment in the column<br/>
               weaken active synapses<br/>
            </para>
            </summary>
            <param name="conn">Connections instance for the <see cref="T:NeoCortexApi.TemporalMemory"/></param>
            <param name="activeSegments">An iterable of <see cref="T:NeoCortexApi.Entities.DistalDendrite"/> actives</param>
            <param name="matchingSegments">An iterable of <see cref="T:NeoCortexApi.Entities.DistalDendrite"/> matching for the column compute is operating on that are matching; None if empty</param>
            <param name="prevActiveCells">Active cells in `t-1`</param>
            <param name="prevWinnerCells">Winner cells in `t-1` are decremented during learning.</param>
            <param name="predictedSegmentDecrement">Amount by which segments are punished for incorrect predictions</param>
        </member>
        <member name="M:NeoCortexApi.TemporalMemory.GetLeastUsedCell(NeoCortexApi.Entities.Connections,System.Collections.Generic.IList{NeoCortexApi.Entities.Cell},System.Random)">
            <summary>
            Gets the cell with the smallest number of segments.
            </summary>
            <param name="conn">Connections instance currentlly in use.</param>
            <param name="cells">List of cells.</param>
            <param name="random">Random generator.</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.TemporalMemory.GrowSynapses(NeoCortexApi.Entities.Connections,System.Collections.Generic.ICollection{NeoCortexApi.Entities.Cell},NeoCortexApi.Entities.DistalDendrite,System.Double,System.Int32,System.Random)">
            <summary>
            Creates nDesiredNewSynapes synapses on the segment passed in if possible, choosing random cells from the previous winner cells that are
            not already on the segment.
            </summary>
            <param name="conn">Connections instance for the <see cref="T:NeoCortexApi.TemporalMemory"/></param>
            <param name="prevWinnerCells">Winner cells in `t-1`</param>
            <param name="segment">Segment to grow synapses on. </param>
            <param name="initialPermanence">Initial permanence of a new synapse.</param>
            <param name="nDesiredNewSynapses">Desired number of synapses to grow</param>
            <param name="random"><see cref="T:NeoCortexApi.TemporalMemory"/> object used to generate random numbers</param>
            <remarks>
            <b>Notes:</b> The process of writing the last value into the index in the array that was most recently changed is to ensure the same results that 
            we get in the c++ implementation using iter_swap with vectors.
            </remarks>
        </member>
        <member name="M:NeoCortexApi.TemporalMemory.AdaptSegment(NeoCortexApi.Entities.Connections,NeoCortexApi.Entities.DistalDendrite,System.Collections.Generic.ICollection{NeoCortexApi.Entities.Cell},System.Double,System.Double)">
            <summary>
            Increments the permanence of the segment's synapse if the synapse's presynaptic cell 
            was active in the previous cycle.
            If it was not active, then it will decrement the permanence value. 
            If the permamence is below EPSILON, synapse is destroyed.
            </summary>
            <param name="conn"></param>
            <param name="segment">The segment to adapt.</param>
            <param name="prevActiveCells">List of active cells in the current cycle (calculated in the previous cycle).</param>
            <param name="permanenceIncrement"></param>
            <param name="permanenceDecrement"></param>
        </member>
        <member name="T:NeoCortexApi.TemporalMemory.ColumnData">
            <summary>
            Used by Temporal memory algorithm.
            </summary>
        </member>
        <member name="M:NeoCortexApi.TemporalMemory.ColumnData.IsExistAnyActiveCol(System.Int32)">
            <summary>
            Result indicates whether the slot at the specified index is empty</summary>
            indicator.<param name="memberIndex">Index of slot.</param>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.TemporalMemoryMT">
            <summary>
            Multicore implementation of the Temporal Memory algorithm
            </summary>
        </member>
        <member name="M:NeoCortexApi.TemporalMemoryMT.ActivateCells(NeoCortexApi.Entities.Connections,System.Int32[],System.Boolean)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="conn"></param>
            <param name="activeColumnIndices"></param>
            <param name="learn"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.BitHistory.AddOrUpdate(System.Collections.Generic.Dictionary{System.Int32,System.Double},System.Int32,System.Double)">
            <summary>
            add or update value to particular key
            </summary>
            <param name="dic">dictionary updated value is needed</param>
            <param name="key">Updating key</param>
            <param name="newValue">new value</param>
        </member>
        <member name="M:NeoCortexApi.Utility.BitHistory.#ctor(System.Double)">
             <summary>
             Contructor for assigning alpha value
             </summary>
             <param name="alpha">The alpha used to compute running averages of the bucket duty
            cycles for each activation pattern bit.A lower alpha results
            in longer term memory.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoCortexApi.Utility.BitHistory.store(System.Int32,System.Int32)" -->
        <member name="M:NeoCortexApi.Utility.BitHistory.Infer(System.Double[])">
             <summary>
             Look up and return the votes for each bucketIdx for this bit.
             </summary>
             <param name="votes">array, initialized to all 0's, that should be filled
            in with the votes for each bucket.The vote for bucket index N
            should go into votes[N].</param>
        </member>
        <member name="M:NeoCortexApi.Utility.ConversionExtensions.Convert(System.Object,System.Type)">
            <summary>
            Converting a value to given type
            </summary>
            <param name="value">value</param>
            <param name="t">expected type</param>
            <returns>converted object</returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ConversionExtensions.Convert``1(System.Object)">
            <summary>
            Converting a value to given type
            </summary>
            <typeparam name="T">expected type</typeparam>
            <param name="value">value</param>
            <returns>converted object</returns>
        </member>
        <member name="T:NeoCortexApi.Utility.GroupBy`2">
            <summary>
            Allegory to the Python itertools.groupby. Objects of this class take a list of inputs and a function to produce keys. The iterator
            or foreach loop generates grouped return values based on the key generated by the supplied function.<br></br>
            For instance:<br></br>
            Given the list:<br></br>
            List&lt;Integer&gt; list = new List&lt;Integer&gt;() { 2, 4, 4, 5 };<br></br>
            and the function:<br></br>
            Func&lt;Integer, Integer&gt; lambda = x => x * 3;<para/>
            
            A GroupBy can be compose as such:<br></br>
            GroupBy&lt;Integer, Integer> grouper = GroupBy.From(l, lambda);<para/>
            
            ...then iterated over as such:<br></br>
            foreach (Pair&lt;Integer, Integer> p in grouper) <br></br>
            {<br></br>
                Console.WriteLine($"Pair key: {p.Key}, pair value: {p.Value}");<br></br>
            }<para/>
            
            Outputs:<para/>
            
            Pair key: 2, pair value: 6<br></br>
            Pair key: 4, pair value: 12<br></br>
            Pair key: 4, pair value: 12<br></br>
            Pair key: 5, pair value: 15<br></br>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="R"></typeparam>
            <remarks>
            Notes: Read up on groupby <a href="https://docs.python.org/dev/library/itertools.html#itertools.groupby">here</a> 
            </remarks>
        </member>
        <member name="F:NeoCortexApi.Utility.GroupBy`2.m_IsStarted">
            serial version 
        </member>
        <member name="M:NeoCortexApi.Utility.GroupBy`2.#ctor(System.Collections.Generic.List{`0},System.Func{`0,`1})">
            Constructs a new {@code GroupBy}
            
            @param l     the {@link List} containing the items used as input to the
                         key generating function.     
            @param fn    the {@link Function} to be used to generate the keys which describe
                         the like contents of each grouping.
            <summary>
            Constructs a new <see cref="T:NeoCortexApi.Utility.GroupBy`2"/>
            </summary>
            <param name="l">the <see cref="T:System.Collections.Generic.List`1"/> containing the items used as input to the key generating function.</param>
            <param name="func">the <see cref="T:System.Func`2"/> to be used to generate the keys which describe the like contents of each grouping</param>
        </member>
        <member name="M:NeoCortexApi.Utility.GroupBy`2.From(System.Collections.Generic.List{`0},System.Func{`0,`1})">
            Returns a new {@code GroupBy} composed from the specified list 
            and key-generating {@link Function}
            
            @param l     the {@link List} containing the items used as input to the
                         key generating function.     
            @param fn    the {@link Function} to be used to generate the keys which describe
                         the like contents of each grouping.
            @return
            <summary>
            Returns a new <see cref="T:NeoCortexApi.Utility.GroupBy`2"/> composed from the specified list and key-generating <see cref="T:System.Func`2"/>
            </summary>
            <param name="l">the <see cref="T:System.Collections.Generic.List`1"/> containing the items used as input to the key generating function.</param>
            <param name="fn">the <see cref="T:System.Func`2"/> to be used to generate the keys which describe the like contents of each grouping</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.GroupBy`2.peek">
            {@inheritDoc}
        </member>
        <member name="M:NeoCortexApi.Utility.GroupBy`2.MoveNext">
            <summary>
            Moves to the nex pair.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NeoCortexApi.Utility.GroupBy`2.NextPair">
            <summary>
            Shows the next pair, but it does not move internal pointer to it.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.Utility.GroupBy2`1">
            <summary>
            An Java extension to groupby in Python's itertools. Allows to walk across n sorted lists with respect to their key functions
            and yields a <see cref="T:System.Tuple"/> of n lists of the members of the next *smallest* group.
            </summary>
            <typeparam name="R">The return type of the user-provided <see cref="T:System.Func`2"/>s</typeparam>
            <remarks>
            Author: cogmission
            </remarks>
        </member>
        <member name="F:NeoCortexApi.Utility.GroupBy2`1.m_Entries">
            <summary>
            stores the user inputted pairs
            </summary>
        </member>
        <member name="F:NeoCortexApi.Utility.GroupBy2`1.advanceList">
            the current interation's minimum key value 
        </member>
        <member name="M:NeoCortexApi.Utility.GroupBy2`1.#ctor(NeoCortexApi.Entities.Pair{System.Collections.Generic.List{System.Object},System.Func{System.Object,`0}}[])">
            <summary>
            Private internally used constructor. To instantiate objects of this class, please see the static factory method <see cref="M:NeoCortexApi.Utility.GroupBy2`1.Of(NeoCortexApi.Entities.Pair{System.Collections.Generic.List{System.Object},System.Func{System.Object,`0}}[])"/> 
            </summary>
            <param name="entries">a <see cref="T:NeoCortexApi.Entities.Pair`2"/> of lists and their key-producing functions</param>
        </member>
        <member name="M:NeoCortexApi.Utility.GroupBy2`1.Of(NeoCortexApi.Entities.Pair{System.Collections.Generic.List{System.Object},System.Func{System.Object,`0}}[])">
            <summary>
            TODO: change to C# code
            Returns a {@code GroupBy2} instance which is used to group lists of objects in ascending order using keys supplied by their associated {@link Function}s. <para/>
            <b>Here is an example of the usage and output of this object: (Taken from {@link GroupBy2Test})</b><br/>
            
             List&lt;Integer> sequence0 = Arrays.asList(new Integer[] { 7, 12, 16 });<br/>
             List&lt;Integer> sequence1 = Arrays.asList(new Integer[] { 3, 4, 5 });<br/>
             
             Func&lt;Integer, Integer> identity = Function.identity();<br/>
             Func&lt;Integer, Integer> times3 = x => x * 3;<br/>
             
             GroupBy2&lt;Integer> groupby2 = GroupBy2.Of(<br/>
                 new Pair(sequence0, identity), <br/>
                 new Pair(sequence1, times3));<br/>
             
             foreach (Tuple tuple in groupby2) {<br/>
                 Console.WriteLine(tuple);<br/>
             }
            <br/>
            <b>Will output the following {@link Tuple}s:</b><br/>
             '7':'[7]':'[NONE]'<br/>
             '9':'[NONE]':'[3]'<br/>
             '12':'[12]':'[4]'<br/>
             '15':'[NONE]':'[5]'<br/>
             '16':'[16]':'[NONE]'<br/>
             
             From row 1 of the output:<br/>
             Where '7' == Tuple.get(0), 'List[7]' == Tuple.get(1), 'List[NONE]' == Tuple.get(2) == empty list with no members<br/>
            
            
            </summary>
            <param name="entries"></param>
            <returns>
            a n + 1 dimensional tuple, where the first element is the key of the group and the other n entries are lists of
            objects that are a member of the current group that is being iterated over in the nth list passed in. Note that this
            is a generator and a n+1 dimensional tuple is yielded for every group.If a list has no members in the current 
            group, <see cref="T:NeoCortexApi.Utility.GroupBy2`1.Slot"/> is returned in place of a generator.
            </returns>
            <remarks>
            Note: Read up on groupby <a href="https://docs.python.org/dev/library/itertools.html#itertools.groupby">here</a>
            </remarks>
        </member>
        <member name="M:NeoCortexApi.Utility.GroupBy2`1.reset">
            <summary>
            Populates generator list with entries and fills the next(List with empty elements.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Utility.GroupBy2`1.Next(`0)">
            <summary>
            Returns a <see cref="T:NeoCortexApi.Entities.Pair`2"/> containing the current key in the zero'th slot, and a list objects which are members of the
            group specified by that key.
            </summary>
            <param name="minKeyVal"></param>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.Utility.GroupBy2`1.Slot`1">
            <summary>
            A minimal {@link Serializable} version of an <see cref="T:NeoCortexApi.Utility.GroupBy2`1.Slot"/>
            </summary>
            <typeparam name="T">the value held within this <see cref="T:NeoCortexApi.Utility.GroupBy2`1.Slot"/></typeparam>
        </member>
        <member name="F:NeoCortexApi.Utility.GroupBy2`1.Slot`1.NONE">
            <summary>
             Common instance for <see cref="M:NeoCortexApi.Utility.GroupBy2`1.Slot`1.Empty"/>.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Utility.GroupBy2`1.Slot`1.Empty">
            <summary>
            Returns an empty <see cref="T:NeoCortexApi.Utility.GroupBy2`1.Slot`1"/> instance.  No value is present for this Slot.
            </summary>
            <returns>an empty <see cref="T:NeoCortexApi.Utility.GroupBy2`1.Slot`1"/></returns>
        </member>
        <member name="F:NeoCortexApi.Utility.GroupBy2`1.Slot`1.value">
            <summary>
            If non-null, the value; if null, indicates no value is present
            </summary>
        </member>
        <member name="M:NeoCortexApi.Utility.GroupBy2`1.Slot`1.#ctor(`1)">
            <summary>
            Constructs an instance with the value present.
            </summary>
            <param name="value">the non-null value to be present</param>
            <exception cref="T:System.NullReferenceException">Throws if value is null.</exception>
        </member>
        <member name="M:NeoCortexApi.Utility.GroupBy2`1.Slot`1.Of(`1)">
            <summary>
            Retruns an <see cref="T:NeoCortexApi.Utility.GroupBy2`1.Slot`1"/> with the specified present non-null value.
            </summary>
            <param name="value">the value to be present, which must be non-null</param>
            <returns>a <see cref="T:NeoCortexApi.Utility.GroupBy2`1.Slot`1"/> with the value present.</returns>
            <exception cref="T:System.NullReferenceException">Throws if value is null.</exception>
        </member>
        <member name="M:NeoCortexApi.Utility.GroupBy2`1.Slot`1.OfNullable(`1)">
            <summary>
            Returns an <see cref="T:NeoCortexApi.Utility.GroupBy2`1.Slot`1"/> describing the specified value, if non-null, otherwise returns an empty <see cref="T:NeoCortexApi.Utility.GroupBy2`1.Slot`1"/>.
            </summary>
            <param name="value">the possibly-null value to describe</param>
            <returns>a <see cref="T:NeoCortexApi.Utility.GroupBy2`1.Slot`1"/> with a present value if the specified value</returns>
        </member>
        <member name="M:NeoCortexApi.Utility.GroupBy2`1.Slot`1.Get">
             If a value is present in this {@code Slot}, returns the value,
             otherwise throws {@code NoSuchElementException}.
            
             @return the non-null value held by this {@code Slot}
             @throws NoSuchElementException if there is no value present
            
             @see Slot#isPresent()
            <summary>
            If a value is present in this <see cref="T:NeoCortexApi.Utility.GroupBy2`1.Slot`1"/>, returns the value, otherwise throws <see cref="T:System.ArgumentException"/>.
            </summary>
            <returns>the non-null value held by this <see cref="T:NeoCortexApi.Utility.GroupBy2`1.Slot`1"/></returns>
            <exception cref="T:System.ArgumentException">Throws if there is no value present.</exception>
        </member>
        <member name="M:NeoCortexApi.Utility.GroupBy2`1.Slot`1.IsPresent">
            <summary>
            Return <see cref="!:true"/> if there is a value present, otherwise <see cref="!:false"/>
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoCortexApi.Utility.GroupBy2`1.Slot`1.Equals(System.Object)" -->
        <member name="M:NeoCortexApi.Utility.GroupBy2`1.Slot`1.GetHashCode">
            <summary>
            Returns the hash code value of the present value, if any, or 0 (zero) if
            no value is present.
            </summary>
            <returns>hash code value of the present value or 0 if no value is present</returns>
        </member>
        <member name="M:NeoCortexApi.Utility.GroupBy2`1.Slot`1.ToString">
            <summary>
            Returns a non-empty string representation of this Slot suitable for debugging. The exact presentation format is unspecified and may vary
            between implementations and versions.
            
            @implSpec If a value is present the result must include its string representation in the result. Empty and present Slots must be unambiguously differentiable.
            </summary>
            <returns>the string representation of this instance</returns>
        </member>
        <member name="M:NeoCortexApi.Utility.GroupBy2`1.Slot`1.Compare(`1,`1)">
            <summary>
            Compares two slots.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.Utility.IntGenerator">
            <summary>
            Generates a range of integers.
            </summary>
            <remarks>
            Author
            </remarks>
        </member>
        <member name="M:NeoCortexApi.Utility.IntGenerator.Get">
            <summary>
            Returns the value returned by the last call to <see cref="M:NeoCortexApi.Utility.IntGenerator.Next"/> or the initial value if no previous call to <see cref="M:NeoCortexApi.Utility.IntGenerator.Next"/> was made. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.IntGenerator.Size">
            <summary>
            Returns the configured size or distance between the initialized upper and lower bounds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.IntGenerator.Reset">
            <summary>
            Returns the state of this generator to its initial state so 
            that it can be reused.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Utility.IntGenerator.Next">
            <summary>
            Moves iterator to the next value and returns the current value.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NeoCortexApi.Utility.IntGenerator.NextValue">
            <summary>
            Gets the next value witout of incremmenting iterator.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Utility.IntGenerator.HasNext">
            {@inheritDoc}
        </member>
        <member name="M:NeoCortexApi.Utility.IntGenerator.Of(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:NeoCortexApi.Utility.IntGenerator"/> which returns integers between
            the values specified (lower inclusive, upper exclusive)
            </summary>
            <param name="lower">the lower bounds or start value</param>
            <param name="upper">the upper bounds (exclusive)</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.MathHelpers.GetHammingDistance(System.Int32[],System.Int32[],System.Boolean)">
            <summary>
            Calculates the hamming distance between arrays.
            </summary>
            <param name="originArray">Original array to compare from.</param>
            <param name="comparingArray">Array to compare to.</param>
            <returns>Hamming distance.</returns>
        </member>
        <member name="M:NeoCortexApi.Utility.MathHelpers.GetHammingDistance(System.Double[][],System.Double[][],System.Boolean)">
            <summary>
            Calculates the hamming distance between arrays.
            </summary>
            <param name="originArray">Original array to compare from.</param>
            <param name="comparingArray">Array to compare to.</param>
            <returns>Hamming distance.</returns>
        </member>
        <member name="M:NeoCortexApi.Utility.MathHelpers.CalcArraySimilarity(System.Int32[],System.Int32[])">
            <summary>
            Calculates how many elements of the array are same in percents. This method is useful to compare 
            two arays that contains indicies of active columns.
            </summary>
            <param name="originArray">Indexes</param>
            <param name="comparingArray">Indexes</param>
            <returns>Similarity between arrays 0.0-1.0</returns>
        </member>
    </members>
</doc>
