<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
	
    <TargetFramework>netstandard2.1</TargetFramework>
    <PackageId>NeoCortexApi</PackageId>
    <Version>1.1.5</Version>
    <Authors>Damir Dobric</Authors>
    <Company>daenet GmbH</Company>
    <Product>Hierarchical Temporal Framework in C#</Product>
    <Copyright>Damir Dobric</Copyright>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <Description>This package is an implementation of Hierarchical Temporal Memory Cortical Learning Algorithm (HTM CLA) in C#/.NET Core. It includes the Spatial Pooler, Temporal Memory, various encoders and Cortical Network algorithms. Implementation of this library aligns to existing Python and JAVA implementation of HTM. Due to similarities between JAVA and C#, current API of SpatialPooler in C# is very similar to JAVA API. Note, future versions will include some API changes, which more align to the c# coding convence.</Description>
    <PackageProjectUrl>https://github.com/ddobric/neocortexapi</PackageProjectUrl>
    <RepositoryUrl>https://github.com/ddobric/neocortexapi</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>htm, temporal memory, spatial pooler, neocortex</PackageTags>
    <PackageLicenseExpression></PackageLicenseExpression>
    <PackageLicenseFile>license.txt</PackageLicenseFile>
	<TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage</TargetsForTfmSpecificBuildOutput>
	<PackageIcon>NeoCortexAPI.png</PackageIcon>
	  <IncludeSymbols>true</IncludeSymbols>
	  <SymbolPackageFormat>snupkg</SymbolPackageFormat>
	  <PackageReleaseNotes>Added method GetPredictedInputValues to the HtmClassifier</PackageReleaseNotes>
	  <EnableNETAnalyzers>True</EnableNETAnalyzers>
	  <AnalysisLevel>latest</AnalysisLevel>
	  <EnforceCodeStyleInBuild>True</EnforceCodeStyleInBuild>
  </PropertyGroup>

  <ItemGroup>
    <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
      <_Parameter1>UnitTestsProject</_Parameter1>
    </AssemblyAttribute>
  </ItemGroup>
  
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
	  <LangVersion>8.0</LangVersion>
    <DefineConstants>TRACE;USE_AKKA</DefineConstants>
    <DebugType>portable</DebugType>
    <DebugSymbols>true</DebugSymbols>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DebugType>full</DebugType>
    <DebugSymbols>true</DebugSymbols>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
	  <LangVersion>8.0</LangVersion>
  </PropertyGroup>
  <ItemGroup>
    <Compile Remove="Anomaly.cs" />
    <Compile Remove="Classification.cs" />
    <Compile Remove="DistributedCompute\HtmSparseIntDictionary.cs" />
    <Compile Remove="Encoders\EncoderBuilder.cs" />
    <Compile Remove="HtmSerializer2.cs" />
    <Compile Remove="Network\NearestClassifier.cs" />
    <Compile Remove="SPSdrReconstructor.cs" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\..\license.txt">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
    <None Include="..\.editorconfig" Link=".editorconfig" />
    <None Include="Anomaly.cs" />
    <None Include="Classification.cs" />
    <None Include="DistributedCompute\HtmSparseIntDictionary.cs" />
    <None Include="Encoders\EncoderBuilder.cs" />
    <None Include="HtmSerializer2.cs" />
    <None Include="NeoCortexApi\NeoCortexAPI.png">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
    <None Include="Network\NearestClassifier.cs" />
    <None Include="SPSdrReconstructor.cs" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.CSharp" Version="4.7.0" />
   
  </ItemGroup>

  <ItemGroup>
	  <ProjectReference Include="..\NeoCortexArrayLib\NeoCortexArrayLib.csproj">
		  <PrivateAssets>all</PrivateAssets>
	  </ProjectReference>
	  <ProjectReference Include="..\NeoCortexEntities\NeoCortexEntities.csproj">
		  <PrivateAssets>all</PrivateAssets>
	  </ProjectReference>
  </ItemGroup>

	<Target DependsOnTargets="BuildOnlySettings;ResolveReferences" Name="CopyProjectReferencesToPackage">
		<ItemGroup>
			<BuildOutputInPackage Include="@(ReferenceCopyLocalPaths-&gt;WithMetadataValue('ReferenceSourceTarget', 'ProjectReference'))" />
		</ItemGroup>
	</Target>
</Project>
