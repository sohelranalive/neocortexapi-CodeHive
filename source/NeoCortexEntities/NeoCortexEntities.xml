<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NeoCortexEntities</name>
    </assembly>
    <members>
        <member name="T:NeoCortexApi.Entities.AbstractFlatMatrix">
            <summary>
            Provides common generic independent calculation functions.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractFlatMatrix.Reverse(System.Int32[])">
            <summary>
            Reverses the array.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractFlatMatrix.ComputeCoordinates(System.Int32,System.Int32[],System.Boolean,System.Int32)">
            <summary>
            Computes multidimensional coordinats from flat index.
            </summary>
            <param name="numDims"></param>
            <param name="dimensionMultiples"></param>
            <param name="isColumnMajor"></param>
            <param name="synapseFlatIndex">Flat intdex of the synapse.</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractFlatMatrix.CheckDims(System.Int32[],System.Int32,System.Int32[])">
            Checks the indexes specified to see whether they are within the
            configured bounds and size parameters of this array configuration.
            
            @param index the array dimensions to check
            <summary>
            Checks the indexes specified to see whether they are within the configured bounds and size parameters of this array configuration.
            </summary>
            <param name="dimensions"></param>
            <param name="numDimensions"></param>
            <param name="coordinates"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractFlatMatrix.ArrayToString(System.Int32[])">
            <summary>
            Prints the specified array to a returned String.
            </summary>
            <param name="arr">the array to be converted to string</param>
            <returns>the array in string form suitable for display.</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractFlatMatrix.InitDimensionMultiples(System.Int32[])">
            <summary>
            Initializes internal helper array which is used for multidimensional index computation.
            </summary>
            <param name="dimensions">matrix dimensions</param>
            <returns>array for use in coordinates to flat index computation.</returns>
        </member>
        <member name="T:NeoCortexApi.Entities.AbstractFlatMatrix`1">
            <summary>
            Imlements flat calculations on matrix.
            Originally authored by: David Ray and  Jose Luis Martin.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractFlatMatrix`1.#ctor(System.Int32[],System.Boolean)">
            <summary>
            Constructs a new <see cref="T:NeoCortexApi.Entities.AbstractFlatMatrix"/> object to be configured with specified dimensions and major ordering.
            </summary>
            <param name="dimensions">the dimensions of this sparse array</param>
            <param name="useColumnMajorOrdering">flag indicating whether to use column ordering or row major ordering. 
                                                 if false (the default), then row major ordering will be used.If true, 
                                                 then column major ordering will be used.</param>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractFlatMatrix`1.ComputeIndex(System.Int32[])">
            <summary>
            Compute the flat index of a multidimensional array.
            </summary>
            <param name="indexes">multidimensional indexes</param>
            <returns>the flat array index.</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractFlatMatrix`1.ComputeIndex(System.Int32[],System.Boolean)">
            <summary>
            Returns a flat index computed from the specified coordinates which represent a "dimensioned" index.
            </summary>
            <param name="coordinates">an array of coordinates</param>
            <param name="doCheck">enforce validated comparison to locally stored dimensions</param>
            <returns>a flat index</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractFlatMatrix`1.CopyInnerArray(System.Int32[])">
            <summary>
            Utility method to shrink a single dimension array by one index.
            </summary>
            <param name="array">the array to shrink</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractFlatMatrix`1.set(System.Collections.Generic.List{NeoCortexApi.Entities.KeyPair})">
            <summary>
            Sets batcvh of values.
            </summary>
            <param name="updatingValues"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractFlatMatrix`1.set(System.Int32[],`0)">
            <summary>
            Sets same value to multiple indexes.
            </summary>
            <param name="indexes"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.serialVersionUID">
            keep it simple 
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.#ctor(System.Int32[])">
            <summary>
            Constructs a new <see cref="T:NeoCortexApi.Entities.AbstractSparseBinaryMatrix"/> with the specified dimensions (defaults to row major ordering)
            </summary>
            <param name="dimensions">each indexed value is a dimension size</param>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.#ctor(System.Int32[],System.Boolean)">
            <summary>
            Constructs a new <see cref="T:NeoCortexApi.Entities.AbstractSparseBinaryMatrix"/> with the specified dimensions, allowing the specification of 
            column major ordering if desired. (defaults to row major ordering) 
            </summary>
            <param name="dimensions">each indexed value is a dimension size</param>
            <param name="useColumnMajorOrdering">if true, indicates column first iteration, otherwise row first iteration is the default (if false).</param>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.GetSlice(System.Int32[])">
            <summary>
            Returns the slice specified by the passed in coordinates. The array is returned as an object, therefore it is the caller's
            responsibility to cast the array to the appropriate dimensions.
            </summary>
            <param name="coordinates">the coordinates which specify the returned array</param>
            <returns>the array specified. Throw <see cref="T:System.ArgumentException"/> if the specified coordinates address an actual value instead of the array holding it.</returns>
            <exception cref="T:System.ArgumentException">Throws if the specified coordinates address an actual value instead of the array holding it.</exception>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.SliceError(System.Int32[])">
            <summary>
            Launch getSlice error, to share it with subclass <see cref="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.GetSlice(System.Int32[])"/> implementations.
            </summary>
            <param name="coordinates"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.GetSliceIndexes(System.Int32[])">
            <summary>
            Calculate the flat indexes of a slice
            </summary>
            <param name="coordinates"></param>
            <returns>the flat indexes array</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.RightVecSumAtNZ(System.Int32[],System.Int32[])">
            <summary>
            Fills the specified results array with the result of the matrix vector multiplication.
            </summary>
            <param name="inputVector">the right side vector</param>
            <param name="results">the results array</param>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.RightVecSumAtNZ(System.Int32[],System.Int32[],System.Double)">
            <summary>
            Fills the specified results array with the result of the matrix vector multiplication.
            </summary>
            <param name="inputVector">the right side vector</param>
            <param name="results">the results array</param>
            <param name="stimulusThreshold"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.set(System.Int32,System.Int32)">
            <summary>
            Sets the value at the specified index.
            </summary>
            <param name="index">the index the object will occupy</param>
            <param name="value">the value to be indexed.</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.set(System.Int32,System.Int32[])">
            <summary>
            Sets the value to be indexed at the index computed from the specified coordinates.
            </summary>
            <param name="value">the value to be indexed</param>
            <param name="coordinates">the row major coordinates [outer --> ,...,..., inner]</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.set(System.Int32[],System.Int32[])">
            <summary>
            Sets the specified values at the specified indexes.
            </summary>
            <param name="indexes">indexes of the values to be set</param>
            <param name="values">the values to be indexed.</param>
            <returns>this <see cref="T:NeoCortexApi.Entities.AbstractSparseBinaryMatrix"/> implementation</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.setForTest(System.Int32,System.Int32)">
            <summary>
            Sets the value at the specified index skipping the automatic truth statistic tallying of the real method.
            </summary>
            <param name="index">the index the object will occupy</param>
            <param name="value">the value to be indexed.</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.set(System.Int32[],System.Int32[],System.Boolean)">
            <summary>
            Call This for TEST METHODS ONLY.<br></br>
            Sets the specified values at the specified indexes.
            </summary>
            <param name="indexes">indexes of the values to be set</param>
            <param name="values">the values to be indexed.</param>
            <param name="isTest"></param>
            <returns>this <see cref="T:NeoCortexApi.Entities.AbstractSparseBinaryMatrix"/> implementation</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.GetTrueCount(System.Int32)">
            <summary>
            Returns the count of 1's set on the specified row.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.SetTrueCount(System.Int32,System.Int32)">
            <summary>
            Sets the count of 1's on the specified row.
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.GetTrueCounts">
            <summary>
            Get the true counts for all outer indexes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.ClearStatistics(System.Int32)">
            <summary>
            Clears the true counts prior to a cycle where they're being set
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.GetIntValue(System.Int32[])">
            <summary>
            Returns the int value at the index computed from the specified coordinates. For example value {7, 21} is TRU if the column 7 is connected to input bit 21.
            </summary>
            <param name="coordinates">the coordinates from which to retrieve the indexed object</param>
            <returns>the indexed object</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.GetIntValue(System.Int32)">
            <summary>
            Returns the T at the specified index.
            </summary>
            <param name="index">the index of the T to return</param>
            <returns>the T at the specified index.</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.GetSparseIndices">
            <summary>
            Returns a sorted array of occupied indexes.
            </summary>
            <returns>a sorted array of occupied indexes.</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.Or(NeoCortexApi.Entities.AbstractSparseBinaryMatrix)">
            <summary>
            This <see cref="T:NeoCortexApi.Entities.SparseBinaryMatrix"/> will contain the operation of or-ing the inputMatrix with the contents of this matrix; returning this matrix as the result. 
            </summary>
            <param name="inputMatrix">the matrix containing the "on" bits to or</param>
            <returns>this matrix</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.Or(System.Collections.Generic.List{System.Int32})">
            <summary>
            This <see cref="T:NeoCortexApi.Entities.SparseBinaryMatrix"/> will contain the operation of or-ing the sparse list with the contents of this matrix; returning this matrix as the result.
            </summary>
            <param name="onBitIndexes">the matrix containing the "on" bits to or</param>
            <returns>this matrix</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.Or(System.Int32[])">
            <summary>
            This <see cref="T:NeoCortexApi.Entities.SparseBinaryMatrix"/> will contain the operation of or-ing the sparse array with the contents of this matrix; returning this matrix as the result.
            </summary>
            <param name="onBitIndexes"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.All(NeoCortexApi.Entities.AbstractSparseBinaryMatrix)">
            <summary>
            Returns true if the on bits of the specified matrix are matched by the on bits of this matrix. It is allowed that this matrix have more on bits than the specified matrix.
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.All(System.Collections.Generic.List{System.Int32})">
            <summary>
            Returns true if the on bits of the specified matrix are matched by the on bits of this matrix. It is allowed that this matrix have more on bits than the specified matrix.
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.All(System.Int32[])">
            <summary>
            Returns true if the on bits of the specified matrix are matched by the on bits of this matrix. It is allowed that this matrix have more on bits than the specified matrix.
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.Any(NeoCortexApi.Entities.AbstractSparseBinaryMatrix)">
            <summary>
            Returns true if any of the on bits of the specified matrix are matched by the on bits of this matrix. It is allowed that this matrix have more on bits than the specified matrix.
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.Any(System.Collections.Generic.HashSet{System.Int32})">
            <summary>
            Returns true if any of the on bits of the specified collection are matched by the on bits of this matrix. It is allowed that this matrix have more on bits than the specified matrix.
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseBinaryMatrix.Any(System.Int32[])">
            <summary>
            Returns true if any of the on bits of the specified matrix are matched by the on bits of this matrix. It is allowed that this matrix have more on bits than the specified matrix.
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.Entities.AbstractSparseMatrix`1">
            <summary>
            Allows storage of array data in sparse form, meaning that the indexes
            of the data stored are maintained while empty indexes are not. This allows
            savings in memory and computational efficiency because iterative algorithms
            need only query indexes containing valid data. The dimensions of matrix defined
            at construction time and immutable - matrix fixed size data structure.
            </summary>
            <typeparam name="T"></typeparam>    
            <remarks>
            Authors of the JAVA implementation: David Ray, Jose Luis Martin
            </remarks>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.#ctor(System.Int32[])">
            <summary>
            Constructs a new <see cref="T:NeoCortexApi.Entities.AbstractSparseMatrix`1"/> with the specified dimensions (defaults to row major ordering)
            </summary>
            <param name="dimensions">each indexed value is a dimension size</param>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.#ctor(System.Int32[],System.Boolean)">
            <summary>
            Constructs a new {@code AbstractSparseMatrix} with the specified dimensions, allowing the specification of column major ordering if desired. 
            (defaults to row major ordering)
            </summary>
            <param name="dimensions">each indexed value is a dimension size</param>
            <param name="useColumnMajorOrdering">if true, indicates column first iteration, otherwise row first iteration is the default (if false).</param>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.set(System.Int32,`0)">
            <summary>
            Sets the object to occupy the specified index.
            </summary>
            <param name="index">the index the object will occupy</param>
            <param name="value">the value to be indexed.</param>
            <returns>this <see cref="T:NeoCortexApi.Entities.AbstractSparseMatrix`1"/> implementation</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.Set(System.Int32,System.Double)">
            <summary>
            Sets the object to occupy the specified index.
            </summary>
            <param name="index">the index the object will occupy</param>
            <param name="value">the value to be indexed.</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.Set(System.Int32[],`0)">
            <summary>
            Sets the specified object to be indexed at the index computed from the specified coordinates.
            </summary>
            <param name="coordinates">the row major coordinates [outer --> ,...,..., inner]</param>
            <param name="obj">the object to be indexed.</param>
            <returns>this <see cref="T:NeoCortexApi.Entities.AbstractSparseMatrix`1"/> implementation</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.set(System.Int32,System.Int32[])">
            <summary>
            Sets the specified object to be indexed at the index computed from the specified coordinates.
            </summary>
            <param name="coordinates">the row major coordinates [outer --> ,...,..., inner]</param>
            <param name="obj">the object to be indexed.</param>
            <returns>this <see cref="T:NeoCortexApi.Entities.AbstractSparseMatrix`1"/> implementation</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.Set(System.Double,System.Int32[])">
            <summary>
            Sets the specified object to be indexed at the index computed from the specified coordinates.
            </summary>
            <param name="coordinates">the row major coordinates [outer --> ,...,..., inner]</param>
            <param name="obj">the object to be indexed.</param>
            <returns>this <see cref="T:NeoCortexApi.Entities.AbstractSparseMatrix`1"/> implementation</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.getObject(System.Int32)">
            <summary>
            Returns the T at the specified index.
            </summary>
            <param name="index">the index of the T to return</param>
            <returns>the T at the specified index.</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.GetIntValue(System.Int32)">
            <summary>
            Returns the T at the specified index.
            </summary>
            <param name="index">the index of the T to return</param>
            <returns>the T at the specified index.</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.GetDoubleValue(System.Int32)">
            <summary>
            Returns the T at the specified index.
            </summary>
            <param name="index">the index of the T to return</param>
            <returns>the T at the specified index.</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.get(System.Int32[])">
            <summary>
            Returns the T at the index computed from the specified coordinates
            </summary>
            <param name="coordinates">the coordinates from which to retrieve the indexed object</param>
            <returns>the indexed object</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.GetIntValue(System.Int32[])">
            <summary>
            Returns the int value at the index computed from the specified coordinates
            </summary>
            <param name="coordinates">the coordinates from which to retrieve the indexed object</param>
            <returns>the indexed object</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.GetDoubleValue(System.Int32[])">
            <summary>
            Returns the double value at the index computed from the specified coordinates
            </summary>
            <param name="coordinates">the coordinates from which to retrieve the indexed object</param>
            <returns>the indexed object</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.Visit(System.Int32[],System.Int32,System.Int32[],System.Collections.Generic.List{System.Int32})">
            <summary>
            Recursively loops through the matrix dimensions to fill the results array with flattened computed array indexes.
            </summary>
            <param name="bounds"></param>
            <param name="currentDimension"></param>
            <param name="p"></param>
            <param name="results"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.AbstractSparseMatrix`1.fill(NeoCortexApi.ITypeFactory{`0},System.Int32,System.Int32[],System.Int32,System.Object[])">
            <summary>
            Uses reflection to create and fill a dynamically created multidimensional array.
            </summary>
            <param name="f">the <see cref="T:NeoCortexApi.ITypeFactory`1"/></param>
            <param name="dimensionIndex">the current index into <em>this class's</em> configured dimensions array <em>*NOT*</em> the dimensions used as this method's argument</param>
            <param name="dimensions">the array specifying remaining dimensions to create</param>
            <param name="count">the current dimensional size</param>
            <param name="arr">the array to fill</param>
        </member>
        <member name="T:NeoCortexApi.Entities.BurstingResult">
            <summary>
            Helper entity for column bursting.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.BurstingResult.Cells">
            <summary>
             List of the processed column's cells.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.BurstingResult.BestCell">
            <summary>
            Chosen as the active cell.
            </summary>
        </member>
        <member name="T:NeoCortexApi.Entities.Cell">
            <summary>
            Defines a single cell (neuron).
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.Cell.Index">
            <summary>
            Index of the cell.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.Cell.CellId">
            <summary>
            The identifier of the cell.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.Cell.ParentColumnIndex">
            <summary>
            The column, which owns this cell.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.Cell.m_Hashcode">
            <summary>
            Stores the calculated cell's hashcode.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.Cell.DistalDendrites">
            <summary>
            List of dendrites of the cell. Every dendrite segment is owned bt the cell.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.Cell.ReceptorSynapses">
            <summary>
            List of receptor synapses that connect this cells as a source cell to the distal dendrit segment owned by some other cell.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.Cell.#ctor">
            <summary>
            Used for testing.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.Cell.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,NeoCortexEntities.NeuroVisualizer.CellActivity)">
            <summary>
            Constructs a new <see cref="T:NeoCortexApi.Entities.Cell"/> object
            </summary>
            <param name="parentColumnIndx"></param>
            <param name="colSeq">the index of this <see cref="T:NeoCortexApi.Entities.Cell"/> within its column</param>
            <param name="numCellsPerColumn"></param>
            <param name="cellId"></param>
            <param name="cellActivity"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Cell.GetHashCode">
            <summary>
            Gets the hashcode of the cell.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Cell.Equals(NeoCortexApi.Entities.Cell)">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Cell.ToString">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Cell.CompareTo(NeoCortexApi.Entities.Cell)">
            <summary>
            Compares two cells.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Cell.Serialize(System.IO.StreamWriter)">
            <summary>
            Serializes the cell to the stream.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Cell.Deserialize(System.IO.StreamReader)">
            <summary>
            Deserializes the cell from the stream.
            </summary>
            <param name="sr"></param>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.Entities.Column">
            <summary>
            Implementation of the mini-column.
            </summary>
            <remarks>
            Authors of the JAVA implementation:Chetan Surpur, David Ray
            </remarks>
        </member>
        <member name="P:NeoCortexApi.Entities.Column.Index">
            <summary>
            Column index
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.Column.ProximalDendrite">
            <summary>
            Dendrites connected to <see cref="!:SpatialPooler"/> input neural cells.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.Column.Cells">
            <summary>
            All cells of the column.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.Column.CellId">
            <summary>
            
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.Column.#ctor(System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
            Creates a new collumn with specified number of cells and a single proximal dendtrite segment.
            </summary>
            <param name="numCells">Number of cells in the column.</param>
            <param name="colIndx">Column index.</param>
            <param name="synapsePermConnected">Permanence threshold value to declare synapse as connected.</param>
            <param name="numInputs">Number of input neorn cells.</param>
        </member>
        <member name="M:NeoCortexApi.Entities.Column.GetNumCellsPerColumn">
            <summary>
            Returns the configured number of cells per column for all <see cref="T:NeoCortexApi.Entities.Column"/> objects within the current {@link TemporalMemory}
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Column.GetLeastUsedCell(NeoCortexApi.Entities.Connections,System.Random)">
            <summary>
            Returns the <see cref="T:NeoCortexApi.Entities.Cell"/> with the least number of <see cref="T:NeoCortexApi.Entities.DistalDendrite"/>s.
            </summary>
            <param name="c">the connections state of the temporal memory</param>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Column.CreatePotentialPool(NeoCortexApi.Entities.HtmConfig,System.Int32[],System.Int32)">
            <summary>
            Creates connections between columns and inputs.
            </summary>
            <param name="htmConfig"></param>
            <param name="inputVectorIndexes"></param>
            <param name="startSynapseIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Column.SetPermanences(NeoCortexApi.Entities.HtmConfig,System.Double[])">
            <summary>
            Sets the permanences for each <see cref="T:NeoCortexApi.Entities.Synapse"/>. The number of synapses is set by the potentialPct variable which determines the number of input
            bits a given column will be "attached" to which is the same number as the number of <see cref="T:NeoCortexApi.Entities.Synapse"/>s
            </summary>
            <param name="htmConfig">the <see cref="T:NeoCortexApi.Entities.Connections"/> memory</param>
            <param name="perms">the floating point degree of connectedness</param>
        </member>
        <member name="M:NeoCortexApi.Entities.Column.setProximalPermanencesSparse(NeoCortexApi.Entities.HtmConfig,System.Double[],System.Int32[])">
            
            
            @param c				the {@link Connections} memory object
            @param permanences	
            <summary>
            Sets the permanences on the <see cref="P:NeoCortexApi.Entities.Column.ProximalDendrite"/> <see cref="T:NeoCortexApi.Entities.Synapse"/>s
            </summary>
            <param name="htmConfig"></param>
            <param name="permanences">floating point degree of connectedness</param>
            <param name="inputVectorIndexes"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Column.UpdatePermanencesForColumnSparse(NeoCortexApi.Entities.HtmConfig,System.Double[],System.Int32[],System.Boolean)">
            This method updates the permanence matrix with a column's new permanence
            values. The column is identified by its index, which reflects the row in
            the matrix, and the permanence is given in 'sparse' form, (i.e. an array
            whose members are associated with specific indexes). It is in
            charge of implementing 'clipping' - ensuring that the permanence values are
            always between 0 and 1 - and 'trimming' - enforcing sparseness by zeroing out
            all permanence values below 'synPermTrimThreshold'. Every method wishing
            to modify the permanence matrix should do so through this method.
            
            @param c                 the {@link Connections} which is the memory model.
            @param perm              An array of permanence values for a column. The array is
                                     "sparse", i.e. it contains an entry for each input bit, even
                                     if the permanence value is 0.
            @param column            The column in the permanence, potential and connectivity matrices
            @param raisePerm         a boolean value indicating whether the permanence values
            <summary>
            This method updates the permanence matrix with a column's new permanence values. The column is identified by its index, which reflects the row in
            the matrix, and the permanence is given in 'sparse' form, (i.e. an array whose members are associated with specific indexes). It is in charge of 
            implementing 'clipping' - ensuring that the permanence values are always between 0 and 1 - and 'trimming' - enforcing sparseness by zeroing out all 
            permanence values below 'synPermTrimThreshold'. Every method wishing to modify the permanence matrix should do so through this method.
            </summary>
            <param name="htmConfig"></param>
            <param name="perm">An array of permanence values for a column. The array is "sparse", i.e. it contains an entry for each input bit, even if the permanence value is 0.</param>
            <param name="maskPotential"></param>
            <param name="raisePerm">a boolean value indicating whether the permanence values</param>
        </member>
        <member name="M:NeoCortexApi.Entities.Column.GetColumnOverlapp(System.Int32[],System.Double)">
            <summary>
            Calculates the overlapp of the column.
            </summary>
            <param name="inputVector"></param>
            <param name="stimulusThreshold">Overlap will be 0 if it is less than this value.</param>
            <returns>The overlap of the column. 0 if it is less than stimulus threshold.</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Column.StringifyVector(System.Int32[])">
            <summary>
            Creates the string representation of the given vector.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Column.SetProximalConnectedSynapsesForTest(NeoCortexApi.Entities.Connections,System.Int32[])">
            <summary>
            Delegates the call to set synapse connected indexes to this <see cref="P:NeoCortexApi.Entities.Column.ProximalDendrite"/>
            </summary>
            <param name="c"></param>
            <param name="inputVectorIndexes"></param>
        </member>
        <member name="F:NeoCortexApi.Entities.Column.m_Hashcode">
            {@inheritDoc}
            @param otherColumn     the {@code Column} to compare to
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Column.ToString">
            <summary>
            Gets readable version of cell.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.Entities.ComputeCycle">
            <summary>
            Holds all important states calculated during a TM computational cycle.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.ComputeCycle.ActiveSegments">
            <summary>
            Segment is understood as active one if the number of connected synapses (with permanence value higher than specified connected permanence threshold) 
            of active cells on that segment, is higher than segment activation threshold.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.ComputeCycle.MatchingSegments">
            <summary>
            Segment is understood as matching one if number of synapses of active cells on that segment 
            is higher than specified segment minimum threshold value.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.ComputeCycle.m_PredictiveCells">
            <summary>
            During temporal learning process, dendrite segments are declared as active, 
            if the number of active synapses (permanence higher than connectedPermanence) on that segment is higher than activationThreshold value.
            A Cell is by default in predictive state (depolarized state) if it owns the active dendrite segment.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.ComputeCycle.ActiveCells">
            <summary>
            Gets the list of active cells.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.ComputeCycle.WinnerCells">
            <summary>
            Gets the list of winner cells.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.ComputeCycle.ActiveSynapses">
            <summary>
            Synapses that create connections to currentlly active cells owners of active segments.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.ComputeCycle.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.ComputeCycle.#ctor(NeoCortexApi.Entities.Connections)">
            <summary>
            
            </summary>
            <param name="c"></param>
        </member>
        <member name="P:NeoCortexApi.Entities.ComputeCycle.PredictiveCellsSynapsesTry">
            <summary>
            Gets the list of cells in predictive state for the current compute cycle.
            It traverses all active segments (<see cref="F:NeoCortexApi.Entities.ComputeCycle.ActiveSegments"/>) and declares their parent cells as predictive cells.
            The TM algorithm does not calculate PredictiveCells. It activates instead distal segments
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.ComputeCycle.PredictiveCells">
            <summary>
            Gets the lost of depolirized cells.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.ComputeCycle.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.Entities.Connections">
            <summary>
            Contains the definition of the interconnected structural state of the SpatialPooler and
            TemporalMemory as well as the state of Cells, Columns, Segments, Synapses etc..
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.Connections.SpIterationNum">
            <summary>
            The number of compute calls on the SP instance.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.Connections.SpIterationLearnNum">
            <summary>
            The number of compute calls of the SP instance with enabled learning.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.m_TieBreaker">
            <summary>
            Initialize a tiny random tie breaker. This is used to determine winning
            columns where the overlaps are identical.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.connectedCounts2">
            <summary>
            Stores the number of connected synapses for each column. This is simply
            a sum of each row of 'connectedSynapses'. again, while this
            information is readily available from 'connectedSynapses', it is
            stored separately for efficiency purposes.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.Connections.ActiveCells">
            <summary>
            The cells currently active as a result of the TM compute.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.Connections.WinnerCells">
            <summary>
            The winner cells in the current TM compute cycle. Cctive cells are winner cells in the trained TM.
            If the TM is not trained, segment has no active cells and all cells will be activated (bursting).
            One of all active column cells will be selected as the winner cell.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.Connections.Cells">
            <summary>
            All cells. Initialized during initialization of the TemporalMemory.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.m_DistalSynapses">
            DD We moved this as a part of the segment.
            <summary>
            Synapses, which belong to some distal dentrite segment.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.m_NextFlatIdx">
            <summary>
            Global tracker of the next available segment index
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.m_NextSegmentOrdinal">
            <summary>
            Global counter incremented for each DD segment creation
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.m_NextSynapseOrdinal">
            <summary>
            Global counter incremented for each DD synapse creation
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.m_NumSynapses">
            <summary>
            Total number of synapses
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.m_FreeFlatIdxs">
            <summary>
            Used for destroying of indexes.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.Connections.m_SegmentForFlatIdx">
            <summary>
            Indexed segments by their global index (can contain nulls).
            Indexed list of distal segments.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.Connections.LastActivity">
            <summary>
            Stores each cycle's most recent activity
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.Connections.NextSegmentOrdinal">
            <summary>
            The segment creation number.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.#ctor">
            <summary>
            Constructs a new <see cref="T:NeoCortexApi.Entities.Connections"/> object. This object
            is usually configured via the <see cref="M:NeoCortexApi.Entities.Parameters.apply(System.Object)"/>
            method. <b>(subjected to changes)</b>
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.#ctor(NeoCortexApi.Entities.HtmConfig)">
            <summary>
            Creates an initialized instance.
            </summary>
            <param name="prms"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.GetCell(System.Int32)">
            <summary>
            Returns the <see cref="T:NeoCortexApi.Entities.Cell"/> specified by the index passed in.
            </summary>
            <param name="index">index of the specified cell to return.</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.GetCells(System.Int32[])">
            <summary>
            Returns an array containing the <see cref="T:NeoCortexApi.Entities.Cell"/>s specified by the passed in indexes.
            </summary>
            <param name="cellIndexes">indexes of the Cells to return</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.GetCellSet(System.Int32[])">
            <summary>
            Returns a <see cref="T:NeoCortexApi.Types.LinkedHashSet`1"/> containing the <see cref="T:NeoCortexApi.Entities.Cell"/>s specified by the passed in indexes.
            </summary>
            <param name="cellIndexes">indexes of the Cells to return</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.SetProximalPermanences(NeoCortexApi.Entities.AbstractSparseMatrix{System.Double[]})">
            <summary>
            Sets the <see cref="T:NeoCortexApi.Entities.AbstractSparseMatrix`1"/> which represents the proximal dendrite permanence values.
            </summary>
            <param name="s">the <see cref="T:NeoCortexApi.Entities.AbstractSparseMatrix`1"/></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.GetTrueCounts">
            Returns the indexed count of connected synapses per column.
            @return
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.SetConnectedCounts(System.Int32[])">
            <summary>
            Sets the indexed count of synapses connected at the columns in each index.
            </summary>
            <param name="counts"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.SetConnectedMatrix(NeoCortexApi.Entities.AbstractSparseBinaryMatrix)">
            <summary>
            Sets the connected count <see cref="T:NeoCortexApi.Entities.AbstractSparseBinaryMatrix"/>, which defines how synapses are connected to input.
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="P:NeoCortexApi.Entities.Connections.TieBreaker">
            <summary>
            Array holding the random noise added to proximal dendrite overlaps.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.Connections.Overlaps">
            <summary>
            Set/Get ovrlaps for each column.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.UpdateActiveDutyCycles(System.Double[])">
            <summary>
            Applies the dense array values which aren't -1 to the array containing the active duty cycles of the column corresponding to the index specified.
            The length of the specified array must be as long as the configured number of columns of this <see cref="T:NeoCortexApi.Entities.Connections"/>' column configuration.
            </summary>
            <param name="denseActiveDutyCycles">a dense array containing values to set.</param>
        </member>
        <member name="P:NeoCortexApi.Entities.Connections.BoostFactors">
            Returns the array of boost factors
            @return	the array of boost factors
            Sets the array of boost factors
            @param boostFactors	the array of boost factors
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.ComputeActivity(System.Collections.Generic.ICollection{NeoCortexApi.Entities.Cell},System.Double)">
            <summary>
            Computes the number of active and potential synapses of the each segment for a given input.
            </summary>
            <param name="activeCellsInCurrentCycle"></param>
            <param name="connectedPermanence"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.RecordSegmentActivity(NeoCortexApi.Entities.DistalDendrite)">
            <summary>
            Record the fact that a segment had some activity. This information is used during segment cleanup.
            </summary>
            <param name="segment">the segment for which to record activity</param>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.StartNewIteration">
            <summary>
            Mark the passage of time. This information is used during segment
            cleanup.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.CreateDistalSegment(NeoCortexApi.Entities.Cell)">
            <summary>
            Adds a new <see cref="T:NeoCortexApi.Entities.DistalDendrite"/> segment on the specified <see cref="T:NeoCortexApi.Entities.Cell"/>, or reuses an existing one.
            </summary>
            <param name="segmentParentCell">the Cell to which a segment is added.</param>
            <returns>the newly created segment or a reused segment.</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.DestroyDistalDendrite(NeoCortexApi.Entities.DistalDendrite)">
            <summary>
            Destroys a segment <see cref="T:NeoCortexApi.Entities.DistalDendrite"/>
            </summary>
            <param name="segment">the segment to destroy</param>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.LeastRecentlyUsedSegment(NeoCortexApi.Entities.Cell)">
            <summary>
            Used internally to return the least recently activated segment on the specified cell
            </summary>
            <param name="cell">cell to search for segments on.</param>
            <returns>the least recently activated segment on the specified cell.</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.NumSegments(NeoCortexApi.Entities.Cell)">
            <summary>
            Returns the number of <see cref="T:NeoCortexApi.Entities.DistalDendrite"/>s on a given <see cref="T:NeoCortexApi.Entities.Cell"/> if specified, or the total number if the <see cref="T:NeoCortexApi.Entities.Cell"/> is null.
            </summary>
            <param name="cell">an optional Cell to specify the context of the segment count.</param>
            <returns>either the total number of segments or the number on a specified cell.</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.GetSegmentForFlatIdx(System.Int32)">
            <summary>
            Get the segment with the specified flatIdx.
            </summary>
            <param name="index">The segment's flattened list index.</param>
            <returns>the <see cref="T:NeoCortexApi.Entities.DistalDendrite"/> who's index matches.</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.ColumnIndexForSegment(NeoCortexApi.Entities.DistalDendrite)">
            <summary>
            Returns the index of the <see cref="T:NeoCortexApi.Entities.Column"/> owning the cell which owns 
            the specified segment.
            </summary>
            <param name="segment">the <see cref="T:NeoCortexApi.Entities.DistalDendrite"/> of the cell whose column index is desired.</param>
            <returns>the owning column's index</returns>
        </member>
        <member name="P:NeoCortexApi.Entities.Connections.ActiveSegments">
            <summary>
            Set/retrieved by the <see cref="!:TemporalMemory"/> following a compute cycle.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.Connections.MatchingSegments">
            <summary>
            Set/retrieved by the <see cref="!:TemporalMemory"/> prior to a compute cycle.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.CreateSynapse(NeoCortexApi.Entities.DistalDendrite,NeoCortexApi.Entities.Cell,System.Double)">
            <summary>
            Creates a new synapse on a segment.
            </summary>
            <param name="segment">the <see cref="T:NeoCortexApi.Entities.DistalDendrite"/> segment to which a <see cref="T:NeoCortexApi.Entities.Synapse"/> is being created.</param>
            <param name="presynapticCell">the source <see cref="T:NeoCortexApi.Entities.Cell"/>.</param>
            <param name="permanence">the initial permanence.</param>
            <returns>the created <see cref="T:NeoCortexApi.Entities.Synapse"/>.</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.DestroySynapse(NeoCortexApi.Entities.Synapse,NeoCortexApi.Entities.DistalDendrite)">
            <summary>
            Destroys the specified <see cref="T:NeoCortexApi.Entities.Synapse"/> in specific <see cref="T:NeoCortexApi.Entities.DistalDendrite"/> segment
            </summary>
            <param name="synapse">the Synapse to destroy</param>
            <param name="segment"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.RemoveSynapseFromPresynapticMap(NeoCortexApi.Entities.Synapse)">
            <summary>
            Removes the specified <see cref="T:NeoCortexApi.Entities.Synapse"/> from its
            pre-synaptic <see cref="T:NeoCortexApi.Entities.Cell"/>'s map of synapses it 
            activates.
            </summary>
            <param name="synapse">the synapse to remove</param>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.MinPermanenceSynapse(NeoCortexApi.Entities.DistalDendrite)">
            <summary>
            Used internally to find the synapse with the smallest permanence
            on the given segment.
            </summary>
            <param name="dd">Segment object to search for synapses on</param>
            <returns>Synapse object on the segment with the minimal permanence</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.Clear">
            <summary>
            Clears the sequence learning state.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.GetPredictiveCells">
            <summary>
            Generates the list of predictive cells from parent cells of active segments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.ClearPredictiveCells">
            <summary>
            Clears the previous predictive cells from the list.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.GetColumn(System.Int32)">
            <summary>
            Returns the column at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.AsCellIndexes(System.Collections.ObjectModel.Collection{NeoCortexApi.Entities.Cell})">
            <summary>
            Converts a <see cref="T:System.Collections.ObjectModel.Collection`1"/> of <see cref="T:NeoCortexApi.Entities.Cell"/>s to a list of cell indexes.
            </summary>
            <param name="cells"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.AsColumnIndexes(System.Collections.ObjectModel.Collection{NeoCortexApi.Entities.Column})">
            <summary>
            Converts a <see cref="T:System.Collections.ObjectModel.Collection`1"/> of <see cref="T:NeoCortexApi.Entities.Column"/>s to a list of column indexes.
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.GetColumnSet(System.Int32[])">
            <summary>
            Returns a <see cref="T:NeoCortexApi.Types.LinkedHashSet`1"/> view of the <see cref="T:NeoCortexApi.Entities.Column"/>s specified by the indexes passed in.
            </summary>
            <param name="indexes">the indexes of the Columns to return</param>
            <returns>a set view of the specified columns</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.GetColumnList(System.Int32[])">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.List`1"/> view of the <see cref="T:NeoCortexApi.Entities.Column"/>s specified by the indexes passed in.
            </summary>
            <param name="indexes">the indexes of the Columns to return</param>
            <returns>a List view of the specified columns</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.ToString">
            High 
            e output useful for debugging
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.GetConnecteds">
            <summary>
            Returns a 2 Dimensional array of 1's and 0's indicating which of the column's pool members are above the connected
            threshold, and therefore considered "connected"
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.GetPotentials">
            <summary>
            Returns a 2 Dimensional array of 1's and 0's indicating which input bits belong to which column's pool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.GetPermanences">
            <summary>
            Returns a 2 Dimensional array of the permanences for SP proximal dendrite column pooled connections.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Connections.TraceInputPotential(System.Boolean)">
            <summary>
            Traces out the potential of input bits.
            </summary>
        </member>
        <member name="T:NeoCortexApi.Entities.Coordinator">
            <summary>
            Transforms coordinates from multidimensional space into the single dimensional space of flat indexes.
            </summary>
            <remarks>
            Authors:
            cogmission, Damir Dobric.
            </remarks>
        </member>
        <member name="F:NeoCortexApi.Entities.Coordinator.isColumnMajor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.Coordinator.#ctor(System.Int32[])">
            <summary>
            Constructs a new <see cref="T:NeoCortexApi.Entities.Coordinator"/> object to be configured with specified dimensions and major ordering.
            </summary>
            <param name="shape">the dimensions of this matrix</param>
        </member>
        <member name="M:NeoCortexApi.Entities.Coordinator.#ctor(System.Int32[],System.Boolean)">
             
            
             
             @param shape                     
             @param useColumnMajorOrdering    
                                              
                                              
                                             
            <summary>
            Constructs a new <see cref="T:NeoCortexApi.Entities.Coordinator"/> object to be configured with specified dimensions and major ordering.
            </summary>
            <param name="shape">the dimensions of this sparse array</param>
            <param name="useColumnMajorOrdering">flag indicating whether to use column ordering or row major ordering. if false 
                                                 (the default), then row major ordering will be used. If true, then column major
                                                 ordering will be used.</param>
        </member>
        <member name="M:NeoCortexApi.Entities.Coordinator.InitDimensionMultiples(System.Int32[])">
            <summary>
            Initializes internal helper array which is used for multidimensional index computation.
            </summary>
            <param name="dimensions">matrix dimensions</param>
            <returns>array for use in coordinates to flat index computation.</returns>
        </member>
        <member name="T:NeoCortexApi.Entities.DistalDendrite">
            <summary>
            Implements a distal dendritic segment that is used for learning sequences.
            Segments are owned by <see cref="T:NeoCortexApi.Entities.Cell"/>s and in turn own <see cref="T:NeoCortexApi.Entities.Synapse"/>s which are obversely connected to by a "source cell", 
            which is the <see cref="T:NeoCortexApi.Entities.Cell"/> which will activate a given <see cref="T:NeoCortexApi.Entities.Synapse"/> owned by this <see cref="T:NeoCortexApi.Entities.Segment"/>.
            </summary>
            <remarks>
            Authors of the JAVA implementation: Chetan Surpur, David Ray
            </remarks>
        </member>
        <member name="F:NeoCortexApi.Entities.DistalDendrite.ParentCell">
            <summary>
            The cell that owns (parent) the segment.
            </summary>        
        </member>
        <member name="P:NeoCortexApi.Entities.DistalDendrite.LastUsedIteration">
            <summary>
            the last iteration in which this segment was active.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.DistalDendrite.Ordinal">
            <summary>
            The seqence number of the segment. Specifies the order of the segment of the <see cref="T:NeoCortexApi.Entities.Connections"/> instance.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.DistalDendrite.#ctor">
            <summary>
            Default constructor used by deserializer.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.DistalDendrite.#ctor(NeoCortexApi.Entities.Cell,System.Int32,System.Int64,System.Int32,System.Double,System.Int32)">
            <summary>
            Creates the Distal Segment.
            </summary>
            <param name="parentCell">The cell, which owns the segment.</param>
            <param name="flatIdx">The flat index of the segment. If some segments are destroyed (synapses lost permanence)
            then the new segment will reuse the flat index. In contrast, 
            the ordinal number will increas when new segments are created.</param>
            <param name="lastUsedIteration"></param>
            <param name="ordinal">The ordindal number of the segment. This number is incremented on each new segment.
            If some segments are destroyed, this number is still incrementd.</param>
            <param name="synapsePermConnected"></param>
            <param name="numInputs"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.DistalDendrite.GetAllSynapses(NeoCortexApi.Entities.Connections)">
            <summary>
            Gets all synapses owned by this distal dentrite segment.
            </summary>
            <param name="mem"></param>
            <returns>Synapses.</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.DistalDendrite.ToString">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.DistalDendrite.GetHashCode">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.DistalDendrite.Equals(NeoCortexApi.Entities.DistalDendrite)">
            <summary>
            Compares this segment with the given one.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.DistalDendrite.CompareTo(NeoCortexApi.Entities.DistalDendrite)">
            <summary>
            Compares by index.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:NeoCortexApi.Entities.EncoderConfig.IsRealCortexModel">
            <summary>
            In real cortex mode, W must be >= 21. Empirical value.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.EncoderConfig.N">
            <summary>
            The width of output vector of encoder. 
            It specifies the length of array, which will be occupied by output vector.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.EncoderConfig.W">
            <summary>
            Number of bits set on one, which represents single encoded value.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.EncoderConfig.Radius">
            <summary>
            How many input values are represented with W encoding bits. r=W*Res.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.EncoderConfig.Resolution">
            <summary>
            How many input values are embedded in the single encoding bit. Res = (max-min)/N.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.EncoderConfig.ClipInput">
            <summary>
            It cats bits at the beginning with negative position and at th eend after last bit.
            This happens only if Periodic is set on false.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.EncoderConfig.Width">
            <summary>
             Gets the output width, in bits.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.EncoderConfig.IsDelta">
            <summary>
            Returns true if the underlying encoder works on deltas
            </summary>
        </member>
        <member name="T:NeoCortexApi.Entities.HtmConfig">
            <summary>
            HTM configuration.
            Also sent from Akka-client to Akka Actor.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.HtmConfig.#ctor(System.Int32[],System.Int32[])">
            <summary>
            Default constructor with the default set of parameters.
            </summary>
            <param name="inputDims"></param>
            <param name="columnDims"></param>
        </member>
        <member name="T:NeoCortexApi.Entities.HtmConfig.TemporalMemoryConfig">
            <summary>
            Not used!
            </summary>
        </member>
        <member name="T:NeoCortexApi.Entities.HtmConfig.SpatialPoolerConfig">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.InhibitionRadius">
            <summary>
            The inhibition radius determines the size of a column's local neighborhood. of a column. A cortical column must overcome the overlap
            score of columns in its neighborhood in order to become actives. This radius is updated every learning round. It grows and shrinks with the
            average number of connected synapses per column.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.InputTopology">
            <summary>
            Manages input neighborhood transformations.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.ColumnTopology">
            <summary>
            Manages column neighborhood transformations.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.NumInputs">
            <summary>
            product of input dimensions.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.NumColumns">
            <summary>
            Initialized after SP.Init.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.PotentialRadius">
            <summary>
            This parameter determines the extent of the input that each column can potentially be connected to.
            This can be thought of as the input bits that are visible to each column, or a 'receptiveField' of
            the field of vision. A large enough value will result in 'global coverage', meaning that each column
            can potentially be connected to every input bit. This parameter defines a square (or hyper square) area: a
            column will have a max square potential pool with sides of length 2 * <see cref="P:NeoCortexApi.Entities.HtmConfig.PotentialRadius"/> + 1.<br/>
            
            <b>WARNING:</b> <see cref="P:NeoCortexApi.Entities.HtmConfig.PotentialRadius"/> <b><i>must</i></b> be set to the inputWidth if using 
            <see cref="P:NeoCortexApi.Entities.HtmConfig.GlobalInhibition"/> and if not using the Network API (which sets this automatically).
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.PotentialPct">
            <summary>
            The percent of the inputs, within a column's potential radius, that a column can be connected to.
            If set to 1, the column will be connected to every input within its potential radius. This parameter is
            used to give each column a unique potential pool when a large potentialRadius causes overlap between the
            columns. At initialization time we choose ((2*<see cref="P:NeoCortexApi.Entities.HtmConfig.PotentialRadius"/> + 1)^(# <see cref="P:NeoCortexApi.Entities.HtmConfig.InputDimensions"/>) *
            <see cref="P:NeoCortexApi.Entities.HtmConfig.PotentialPct"/>) input bits to comprise the column's potential pool.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.StimulusThreshold">
            <summary>
            Minimum number of connected synapses to make column active. Specified as a percent of a fully grown synapse.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.SynPermBelowStimulusInc">
            <summary>
            Synapses of weak mini-columns will be stimulated by the boosting mechanism. The stimulation is done by adding of this increment value to the current permanence value of the synapse.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.SynPermInactiveDec">
            <summary>
            The amount by which an inactive synapse is decremented in each round. Specified as a percent of a fully grown synapse.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.SynPermActiveInc">
            <summary>
            The amount by which an active synapse is incremented in each round. Specified as a percent of a fully grown synapse.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.SynPermConnected">
            <summary>
            The default connected threshold. Any synapse whose permanence value is above the connected threshold is
            a "connected synapse", meaning it can contribute to the cell's firing.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.WrapAround">
            <summary>
            Specifies whether neighborhoods wider than the borders wrap around to the other side.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.GlobalInhibition">
            <summary>
            Enforses using of global inhibition process.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.LocalAreaDensity">
            <summary>
            The desired density of active columns within a local inhibition area (the size of which is set by the
            internally calculated <see cref="P:NeoCortexApi.Entities.HtmConfig.InhibitionRadius"/>, which is in turn determined from the average size of the
            connected potential pools of all columns). The inhibition logic will insure that at most N columns
            remain ON within a local inhibition area, where N = <see cref="P:NeoCortexApi.Entities.HtmConfig.LocalAreaDensity"/> * (total number of columns in
            inhibition area).
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.SynPermMax">
            <summary>
            Maximum <see cref="T:NeoCortexApi.Entities.Synapse"/> permanence.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.SynPermMin">
            <summary>
            Minimum <see cref="T:NeoCortexApi.Entities.Synapse"/> permanence.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.InitialSynapseConnsPct">
            <summary>
            Percent of initially connected synapses. Typically 50%.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.InputMatrix">
            <summary>
            Input column mapping matrix.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.NumActiveColumnsPerInhArea">
            <summary>
            The configured number of active columns per inhibition area.<br/>
            An alternate way to control the density of the active columns. If numActivePerInhArea is specified then
            localAreaDensity must be less than 0, and vice versa. When using numActivePerInhArea, the inhibition logic
            will insure that at most <see cref="P:NeoCortexApi.Entities.HtmConfig.NumActiveColumnsPerInhArea"/> columns remain ON within a local inhibition area (the
            size of which is set by the internally calculated inhibitionRadius, which is in turn determined from
            the average size of the connected receptive fields of all columns). When using this method, as columns
            learn and grow their effective receptive fields, the inhibitionRadius will grow, and hence the net density
            of the active columns will *decrease*. This is in contrast to the localAreaDensity method, which keeps
            the density of active columns the same regardless of the size of their receptive fields.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.MinPctOverlapDutyCycles">
            <summary>
            A number between 0 and 1.0, used to set a floor on how often a column should have at least
            stimulusThreshold active inputs. Periodically, each column looks at the overlap duty cycle of
            all other columns within its inhibition radius and sets its own internal minimal acceptable duty cycle
            to: minPctDutyCycleBeforeInh * max(other columns' duty cycles).
            On each iteration, any column whose overlap duty cycle falls below this computed value will  get
            all of its permanence values boosted up by <see cref="P:NeoCortexApi.Entities.HtmConfig.SynPermActiveInc"/>. Raising all permanences in response
            to a sub-par duty cycle before  inhibition allows a cell to search for new inputs when either its
            previously learned inputs are no longer ever active, or when the vast majority of them have been
            "hijacked" by other columns.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.MinPctActiveDutyCycles">
            <summary>
            A number between 0 and 1.0, used to set a floor on how often a column should be activated.
            Periodically, each column looks at the activity duty cycle of all other columns within its inhibition
            radius and sets its own internal minimal acceptable duty cycle to:<br/>
            minPctDutyCycleAfterInh * max(other columns' duty cycles).<br/>
            On each iteration, any column whose duty cycle after inhibition falls below this computed value will get
            its internal boost factor increased.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.PredictedSegmentDecrement">
            <summary>
            Amount by which active permanences of synapses of previously predicted but inactive segments are decremented.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.DutyCyclePeriod">
            <summary>
            The period used to calculate duty cycles. Higher values make it take longer to respond to changes in
            boost or synPerConnectedCell. Shorter values make it more unstable and likely to oscillate.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.MaxBoost">
            <summary>
            The maximum overlap boost factor. Each column's overlap gets multiplied by a boost factor
            before it gets considered for inhibition. The actual boost factor for a column is number
            between 1.0 and maxBoost. A boost factor of 1.0 is used if the duty cycle is &gt;= minOverlapDutyCycle,
            maxBoost is used if the duty cycle is 0, and any duty cycle in between is linearly extrapolated from these
            2 end points.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.IsBumpUpWeakColumnsDisabled">
            <summary>
            Controls if bumping-up of weak columns shell be done.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.UpdatePeriod">
            <summary>
            Period count which is the number of cycles between updates of inhibition radius and min. duty cycles.
            <see cref="!:SpatialPooler.compute"/>
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.OverlapDutyCycles">
            <summary>
            Overlap duty cycles.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.ActiveDutyCycles">
            <summary>
            The dense (size=numColumns) array of duty cycle stats.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.MinOverlapDutyCycles">
            <summary>
            TODO property documentation
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.MinActiveDutyCycles">
            <summary>
            TODO property documentation
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.ColumnDimensions">
            <summary>
            Number of <see cref="T:NeoCortexApi.Entities.Column"/>
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.CellsPerColumn">
            <summary>
            Nunmber of <see cref="T:NeoCortexApi.Entities.Cell"/>s per <see cref="T:NeoCortexApi.Entities.Column"/>
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.InputDimensions">
            <summary>
            A list representing the dimensions of the input vector. Format is [height, width, depth, ...], where
            each value represents the size of the dimension. For a topology of one dimension with 100 inputs use 100, or
            [100]. For a two dimensional topology of 10x5 use [10,5].
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.MaxNewSynapseCount">
            <summary>
            The maximum number of synapses added to a segment during learning.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.MaxSegmentsPerCell">
            <summary>
            The maximum number of segments (distal dendrites) allowed on a cell.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.MaxSynapsesPerSegment">
            <summary>
            The maximum number of synapses allowed on a given segment (distal dendrite).
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.PermanenceIncrement">
            <summary>
            Amount by which permanences of synapses are incremented during learning.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.PermanenceDecrement">
            <summary>
            Amount by which permanences of synapses are decremented during learning.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.ColumnModuleTopology">
            <summary>
            TODO property documentation
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.InputModuleTopology">
            <summary>
            TODO property documentation
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.Memory">
            <summary>
            The main data structure containing columns, cells, and synapses.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.ActivationThreshold">
            <summary>
            Activation threshold. If the number of active connected synapses on a segment is at least this threshold, the segment is said to be active.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.LearningRadius">
            <summary>
            Radius around cell from which it can
            sample to form distal dendrite connections.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.MinThreshold">
            <summary>
            If the number of synapses active on a segment is at least this threshold, it is selected as the best matching
            cell in a bursting column.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.InitialPermanence">
            <summary>
            Initial permanence of a new synapse
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.ConnectedPermanence">
            <summary>
            If the permanence value for a synapse is greater than this value, it is said to be connected.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.RandomGenSeed">
            <summary>
            Use -1 if real random generator has to be used with timestamp seed.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.Name">
            <summary>
            The name of the actor as set by actor-client.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.HtmConfig.Random">
            <summary>
            The random number generator
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.HtmConfig.SetHtmConfigDefaultParameters(System.Int32[],System.Int32[])">
            <summary>
            Set default value for parameters of <see cref="T:NeoCortexApi.Entities.HtmConfig"/>
            </summary>
        </member>
        <member name="T:NeoCortexApi.Entities.HtmModuleTopology">
            <summary>
            Used as container for properties, which define topology of HTM module.
            </summary>
        </member>
        <member name="T:NeoCortexApi.Entities.IFlatMatrix`1">
            <summary>
            Allows storage of array data in sparse form, meaning that the indexes of the data stored are maintained while empty indexes are not. This allows
            savings in memory and computational efficiency because iterative algorithms need only query indexes containing valid data. The dimensions of matrix 
            defined at construction time and immutable - matrix fixed size data structure.
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            Authors of the JAVA implementation: David Ray, Jose Luis Martin
            </remarks>
        </member>
        <member name="M:NeoCortexApi.Entities.IFlatMatrix`1.set(System.Int32,`0)">
            <summary>
            Sets the single value in the array.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.IFlatMatrix`1.GetMaxIndex">
            <summary>
            Returns the maximum accessible flat index.
            </summary>
            <returns>the maximum accessible flat index.</returns>
        </member>
        <member name="P:NeoCortexApi.Entities.IFlatMatrix`1.ModuleTopology">
            Returns an integer array representing the coordinates of the specified index
            in terms of the configuration of this {@code SparseMatrix}.
            @param index the flat index to be returned as coordinates
            @return  coordinates
        </member>
        <member name="T:NeoCortexApi.Entities.IMatrix`1">
            <summary>
            Base interface for Matrices.
            </summary>
            <typeparam name="T">element type</typeparam>
            <remarks>
            Authors of the JAVA implementation: Jose Luis Martin
            </remarks>
        </member>
        <member name="M:NeoCortexApi.Entities.IMatrix`1.GetDimensions">
            <summary>
            Returns the array describing the dimensionality of the configured array.
            </summary>
            <returns>the array describing the dimensionality of the configured array.</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.IMatrix`1.GetNumDimensions">
            <summary>
            Returns the configured number of dimensions.
            </summary>
            <returns>the configured number of dimensions.</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.IMatrix`1.get(System.Int32[])">
            <summary>
            Gets element at supplied index.
            </summary>
            <param name="index">index index to retrieve.</param>
            <returns>element at index.</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.IMatrix`1.set(System.Int32[],`0)">
            <summary>
            Puts an element to supplied index.
            </summary>
            <param name="index">index to put on.</param>
            <param name="value">value element.</param>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.Entities.IntGenerator">
            <summary>
            Generates a range of integers.
            </summary>
            Author
        </member>
        <member name="M:NeoCortexApi.Entities.IntGenerator.Get">
            <summary>
            Returns the value returned by the last call to <see cref="M:NeoCortexApi.Entities.IntGenerator.Next"/> or the initial value if no previous call to <see cref="M:NeoCortexApi.Entities.IntGenerator.Next"/> was made.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.IntGenerator.Size">
            <summary>
            Returns the configured size or distance between the initialized upper and lower bounds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.IntGenerator.Reset">
            <summary>
            Reset the state of this generator to its initial state so that it can be reused.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.IntGenerator.Next">
            <summary>
            Moves iterator to the next value and returns the current value.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NeoCortexApi.Entities.IntGenerator.NextValue">
            <summary>
            Gets the next value witout of incremmenting iterator.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.IntGenerator.HasNext">
            {@inheritDoc}
        </member>
        <member name="M:NeoCortexApi.Entities.IntGenerator.Of(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:NeoCortexApi.Entities.IntGenerator"/> which returns integers between the values specified (lower inclusive, upper exclusive)
            </summary>
            <param name="lower">the lower bounds or start value</param>
            <param name="upper">the upper bounds (exclusive)</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.ISparseMatrix`1.GetSparseIndices">
            <summary>
            Returns a sorted array of occupied indexes.
            </summary>
            <returns>a sorted array of occupied indexes.</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.ISparseMatrix`1.Get1DIndexes">
            <summary>
            Returns an array of all the flat indexes that can be computed from the current configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.IS_BUMPUP_WEAKCOLUMNS_DISABLED">
            <summary>
            If set on true, no bump-up of weak columns will be done.
            Note that bumping-up can cause Spatial Pooler to get instable.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.COLUMN_DIMENSIONS">
            <summary>
            Total number of columns.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.CELLS_PER_COLUMN">
            <summary>
            Total number of cells per column
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.LEARN">
            <summary>
            Learning variable
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.RANDOM">
            <summary>
            Random Number Generator
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.SEED">
            <summary>
            Seed for random number generator
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.ACTIVATION_THRESHOLD">
            <summary>
            If the number of active connected synapses on a segment is at least this threshold, the segment is said to be active.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.LEARNING_RADIUS">
            <summary>
            Radius around cell from which it can sample to form distal <see cref="T:NeoCortexApi.Entities.DistalDendrite"/> connections.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.MIN_THRESHOLD">
            <summary>
            If the number of synapses active on a segment is at least this threshold, it is selected as the best matching cell in a bursting column.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.MAX_NEW_SYNAPSE_COUNT">
            <summary>
            The maximum number of synapses added to a segment during learning.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.MAX_SYNAPSES_PER_SEGMENT">
            <summary>
            The maximum number of synapses that can be added to a segment.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.MAX_SEGMENTS_PER_CELL">
            <summary>
            The maximum number of <see cref="T:NeoCortexApi.Entities.Segment"/>s a <see cref="T:NeoCortexApi.Entities.Cell"/> can have.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.INITIAL_PERMANENCE">
            <summary>
            Initial permanence of a new synapse
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.CONNECTED_PERMANENCE">
            <summary>
            If the permanence value for a synapse is greater than this value, it is said to be connected.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.PERMANENCE_INCREMENT">
            <summary>
            Amount by which permanence of synapses are incremented during learning.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.PERMANENCE_DECREMENT">
            <summary>
            Amount by which permanences of synapses
            are decremented during learning.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.PREDICTED_SEGMENT_DECREMENT">
            <summary>
            Amount by which active permanences of synapses of previously predicted but inactive segments are decremented.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.INPUT_DIMENSIONS">
            TODO: Remove this and add Logging (slf4j) 
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.POTENTIAL_RADIUS">
            <summary>
            <b>WARNING:</b> potentialRadius <b>must</b> be set to the inputWidth if using <see cref="F:NeoCortexApi.Entities.KEY.GLOBAL_INHIBITION"/> and if not using 
            the Network API (which sets this automatically) 
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.POTENTIAL_PCT">
            <summary>
            The percent of the inputs, within a column's potential radius, that a column can be connected to.  If set to 1, the column will be connected
            to every input within its potential radius. This parameter is used to give each column a unique potential pool when a large potentialRadius
            causes overlap between the columns. At initialization time we choose ((2*potentialRadius + 1)^(# inputDimensions) * potentialPct) input bits
            to comprise the column's potential pool.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.GLOBAL_INHIBITION">
            <summary>
            If true, then during inhibition phase the winning columns are selected as the most active columns from the region as a whole. Otherwise, the
            winning columns are selected with respect to their local neighborhoods. Using global inhibition boosts performance x60.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.INHIBITION_RADIUS">
            <summary>
            The inhibition radius determines the size of a column's local neighborhood. A cortical column must overcome the overlap score of columns in its
            neighborhood in order to become active. This radius is updated every learning round. It grows and shrinks with the average number of connected
            synapses per column.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.LOCAL_AREA_DENSITY">
            <summary>
            The desired density of active columns within a local inhibition area (the size of which is set by the internally calculated inhibitionRadius,
            which is in turn determined from the average size of the connected potential pools of all columns). The inhibition logic will insure that
            at most N columns remain ON within a local inhibition area, where N = localAreaDensity * (total number of columns in inhibition area).
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.NUM_ACTIVE_COLUMNS_PER_INH_AREA">
            <summary>
            An alternate way to control the density of the active columns. If numActiveColumnsPerInhArea is specified then localAreaDensity must be
            less than 0, and vice versa.  When using numActiveColumnsPerInhArea, the inhibition logic will insure that at most 'numActiveColumnsPerInhArea'
            columns remain ON within a local inhibition area (the size of which is set by the internally calculated inhibitionRadius, which is in turn
            determined from the average size of the connected receptive fields of all columns). When using this method, as columns learn and grow their
            effective receptive fields, the inhibitionRadius will grow, and hence the net density of the active columns will *decrease*. This is in contrast to
            the localAreaDensity method, which keeps the density of active columns the same regardless of the size of their receptive fields.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.STIMULUS_THRESHOLD">
            <summary>
            This is a number specifying the minimum number of synapses that must be
            on in order for a columns to turn ON.The purpose of this is to prevent 
            noise input from activating columns.Specified as a percent of a fully grown synapse.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.SYN_PERM_INACTIVE_DEC">
            <summary>
            The amount by which an inactive synapse is decremented in each round. Specified as a percent of a fully grown synapse.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.SYN_PERM_ACTIVE_INC">
            <summary>
            The amount by which an active synapse is incremented in each round. Specified as a percent of a fully grown synapse.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.SYN_PERM_CONNECTED">
            <summary>
            The default connected threshold. Any synapse whose permanence value is above the connected threshold is a "connected synapse", meaning it can
            contribute to the cell's firing.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.SYN_PERM_BELOW_STIMULUS_INC">
            <summary>
            <b>WARNING:</b> This is a <i><b>derived</b></i> value, and is overwritten by the SpatialPooler algorithm's initialization.
            The permanence increment amount for columns that have not been recently active
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.SYN_PERM_TRIM_THRESHOLD">
            <summary>
            <b>WARNING:</b> This is a <i><b>derived</b></i> value, and is overwritten by the SpatialPooler algorithm's initialization.
            Values below this are "clipped" and zero'd out.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.MIN_PCT_OVERLAP_DUTY_CYCLES">
            <summary>
            A number between 0 and 1.0, used to set a floor on how often a column should have at least stimulusThreshold active inputs. Periodically, each
            column looks at the overlap duty cycle of all other columns within its inhibition radius and sets its own internal minimal acceptable duty cycle
            to: minPctDutyCycleBeforeInh * max(other columns' duty cycles).  On each iteration, any column whose overlap duty cycle falls below this computed
            value will  get all of its permanence values boosted up by synPermActiveInc. Raising all permanences in response to a sub-par duty
            cycle before  inhibition allows a cell to search for new inputs when either its previously learned inputs are no longer ever active, or when
            the vast majority of them have been "hijacked" by other columns.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.MIN_PCT_ACTIVE_DUTY_CYCLES">
            <summary>
            A number between 0 and 1.0, used to set a floor on how often a column should be activate.  Periodically, each column looks at the activity duty
            cycle of all other columns within its inhibition radius and sets its own internal minimal acceptable duty cycle to: minPctDutyCycleAfterInh *
            max(other columns' duty cycles).  On each iteration, any column whose duty cycle after inhibition falls below this computed value will get its
            internal boost factor increased.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.DUTY_CYCLE_PERIOD">
            <summary>
            The period used to calculate duty cycles. Higher values make it take longer to respond to changes in boost or synPerConnectedCell. Shorter
            values make it more unstable and likely to oscillate.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.MAX_BOOST">
            <summary>
            The maximum overlap boost factor. Each column's overlap gets multiplied by a boost factor before it gets considered for inhibition.  The actual
            boost factor for a column is number between 1.0 and maxBoost. A boost factor of 1.0 is used if the duty cycle is >= minOverlapDutyCycle,
            maxBoost is used if the duty cycle is 0, and any duty cycle in between is linearly extrapolated from these 2 endpoints.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.WRAP_AROUND">
            <summary>
            Determines if inputs at the beginning and end of an input dimension should be considered neighbors when mapping columns to inputs.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.SP_PRIMER_DELAY">
            <summary>
            Number of cycles to send through the SP before forwarding data to the rest of the network.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.N">
            <summary>
            number of bits in the representation (must be &gt;= w)
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.W">
            <summary>
            The number of bits that are set to encode a single value - the "width" of the output signal
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.MIN_VAL">
            <summary>
            The minimum value of the input signal.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.MAX_VAL">
            <summary>
            The maximum value of the input signal.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.RADIUS">
            <summary>
            inputs separated by more than, or equal to this distance will have non-overlapping representations
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.RESOLUTION">
            <summary>
            inputs separated by more than, or equal to this distance will have different representations
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.PERIODIC">
            <summary>
            If true, then the input value "wraps around" such that minval = maxval. For a periodic value, the input must be strictly less than maxval,
            otherwise maxval is a true upper bound.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.CLIP_INPUT">
            <summary>
            if true, non-periodic inputs smaller than minval or greater than maxval will be clipped to minval/maxval 
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.FORCED">
            <summary>
            If true, skip some safety checks (for compatibility reasons), default false  Mostly having to do with being able to set the window size &lt; 21 
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.FIELD_NAME">
            <summary>
            Name of the field being encoded
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.FIELD_TYPE">
            <summary>
            Primitive type of the field, used to auto-configure the type of encoder
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.ENCODER">
            <summary>
            Encoder name
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.FIELD_ENCODING_MAP">
            <summary>
            Designates holder for the Multi Encoding Map
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.AUTO_CLASSIFY">
            <summary>
            Network Layer indicator for auto classifier generation
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.KEY.INFERRED_FIELDS">
            <summary>
            Maps encoder input field name to type of classifier to be used for them
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.Pair`2.#ctor">
            <summary>
            Creates an empty key-pair.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.Clone">
            <summary>
            Clones parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.size">
            <summary>
            Returns the size of the internal parameter storage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.getAllDefaultParameters">
            <summary>
            Factory method. Return global <see cref="T:NeoCortexApi.Entities.Parameters"/> object with default values
            </summary>
            <returns><see cref="T:NeoCortexApi.Entities.Parameters"/></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.getTemporalDefaultParameters">
            <summary>
            Factory method. Return temporal <see cref="T:NeoCortexApi.Entities.Parameters"/> object with default values
            </summary>
            <returns><see cref="T:NeoCortexApi.Entities.Parameters"/> object</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.getSpatialDefaultParameters">
            <summary>
            Factory method. Return spatial <see cref="T:NeoCortexApi.Entities.Parameters"/> object with default values
            </summary>
            <returns><see cref="T:NeoCortexApi.Entities.Parameters"/></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.getEncoderDefaultParameters">
            <summary>
            Factory method. Return Encoder <see cref="T:NeoCortexApi.Entities.Parameters"/> object with default values
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.getParameters(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Called internally to populate a <see cref="T:NeoCortexApi.Entities.Parameters"/> object with the keys and values specified in the passed in map.
            </summary>
            <param name="map"></param>
            <returns><see cref="T:NeoCortexApi.Entities.Parameters"/></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.apply(System.Object)">
            <summary>
            Sets the fields specified by this <see cref="T:NeoCortexApi.Entities.Parameters"/> on the specified <see cref="T:NeoCortexApi.Entities.Connections"/> object.
            </summary>
            <param name="cn"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setRandom(System.Random)">
            <summary>
            Returns the seeded random number generator.
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setColumnDimensions(System.Int32[])">
            <summary>
            Sets the number of <see cref="T:NeoCortexApi.Entities.Column"/>.
            </summary>
            <param name="columnDimensions"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setCellsPerColumn(System.Int32)">
            <summary>
            Sets the number of <see cref="T:NeoCortexApi.Entities.Cell"/>s per <see cref="T:NeoCortexApi.Entities.Column"/>
            </summary>
            <param name="cellsPerColumn"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setActivationThreshold(System.Int32)">
            <summary>
            Sets the activation threshold.<br/>
            If the number of active connected synapses on a segment is at least this threshold, the segment is said to be active.
            </summary>
            <param name="activationThreshold"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setLearningRadius(System.Int32)">
            <summary>
            Radius around cell from which it can sample to form distal dendrite connections.
            </summary>
            <param name="learningRadius"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setMinThreshold(System.Int32)">
            <summary>
            If the number of synapses active on a segment is at least this threshold, it is selected as the best matching cell in a bursting column.
            </summary>
            <param name="minThreshold"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setMaxSynapsesPerSegment(System.Int32)">
            <summary>
            The maximum number of synapses added to a segment during learning.
            </summary>
            <param name="maxSynapsesPerSegment"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setMaxSegmentsPerCell(System.Int32)">
            <summary>
            The maximum number of <see cref="T:NeoCortexApi.Entities.Segment"/>s a <see cref="T:NeoCortexApi.Entities.Cell"/> can have.
            </summary>
            <param name="maxSegmentsPerCell"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setMaxNewSynapsesPerSegmentCount(System.Int32)">
            <summary>
            The maximum number of new synapses per segment.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setSeed(System.Int32)">
            <summary>
            Seed for random number generator 
            </summary>
            <param name="seed"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setInitialPermanence(System.Double)">
            <summary>
            Initial permanence of a new synapse
            </summary>
            <param name="initialPermanence"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setConnectedPermanence(System.Double)">
            <summary>
            If the permanence value for a synapse is greater than this value, it is said to be connected.
            </summary>
            <param name="connectedPermanence"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setPermanenceIncrement(System.Double)">
            <summary>
            Amount by which permanences of synapses are incremented during learning.
            </summary>
            <param name="permanenceIncrement"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setPermanenceDecrement(System.Double)">
            <summary>
            Amount by which permanences of synapses are decremented during learning.
            </summary>
            <param name="permanenceDecrement"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setInputDimensions(System.Int32[])">
            <summary>
            A list representing the dimensions of the input vector. Format is [height, width, depth, ...], where each value represents the size of
            the dimension. For a topology of one dimension with 100 inputs use 100, or [100]. For a two dimensional topology of 10x5 use [10,5].
            </summary>
            <param name="inputDimensions"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setPotentialRadius(System.Int32)">
            <summary>
            This parameter determines the extent of the input that each column can potentially be connected to. This can be thought of as 
            the input bits that are visible to each column, or a 'receptiveField' of the field of vision. A large enough value will result in 
            'global coverage', meaning that each column can potentially be connected to every input bit. This parameter defines a square 
            (or hyper square) area: a column will have a max square potential pool with sides of length 2 * potentialRadius + 1.
            </summary>
            <param name="potentialRadius"></param>
            <remarks>
            <b>WARNING:</b> potentialRadius <i>must</i> be set to 
            the inputWidth if using "globalInhibition" and if not 
            using the Network API (which sets this automatically) 
            
            </remarks>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setInhibitionRadius(System.Int32)">
            <summary>
            The inhibition radius determines the size of a column's local neighborhood. of a column. A cortical column must overcome the overlap
            score of columns in his neighborhood in order to become actives. This radius is updated every learning round. It grows and shrinks with the
            average number of connected synapses per column.
            </summary>
            <param name="inhibitionRadius">the local group size</param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setPotentialPct(System.Double)">
            <summary>
            The percent of the inputs, within a column's potential radius, that a column can be connected to. If set to 1, the column will be connected
            to every input within its potential radius. This parameter is used to give each column a unique potential pool when a large potentialRadius
            causes overlap between the columns. At initialization time we choose ((2*potentialRadius + 1)^(# inputDimensions) * potentialPct) input bits 
            to comprise the column's potential pool.
            </summary>
            <param name="potentialPct"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setGlobalInhibition(System.Boolean)">
            <summary>
            If true, then during inhibition phase the winning columns are selected as the most active columns from the region as a whole. 
            Otherwise, the winning columns are selected with respect to their local neighborhoods. Using global inhibition boosts performance x60.
            </summary>
            <param name="globalInhibition"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setLocalAreaDensity(System.Double)">
            <summary>
            The desired density of active columns within a local inhibition area (the size of which is set by the internally calculated inhibitionRadius,
            which is in turn determined from the average size of the connected potential pools of all columns). The inhibition logic will insure that 
            at most N columns remain ON within a local inhibition area, where N = localAreaDensity * (total number of columns in inhibition area).
            </summary>
            <param name="localAreaDensity"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setNumActiveColumnsPerInhArea(System.Double)">
            <summary>
            An alternate way to control the density of the active columns. If numActivePerInhArea is specified then localAreaDensity must be less than 0,
            and vice versa. When using numActivePerInhArea, the inhibition logic will insure that at most 'numActivePerInhArea' columns remain ON within
            a local inhibition area (the size of which is set by the internally calculated inhibitionRadius, which is in turn determined from 
            the average size of the connected receptive fields of all columns). When using this method, as columns learn and grow their effective receptive
            fields, the inhibitionRadius will grow, and hence the net density of the active columns will *decrease*. This is in contrast to 
            the localAreaDensity method, which keeps the density of active columns the same regardless of the size of their receptive fields.
            </summary>
            <param name="numActiveColumnsPerInhArea"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setStimulusThreshold(System.Double)">
            <summary>
            This is a number specifying the minimum number of synapses that must be on in order for a columns to turn ON. The purpose of this is 
            to prevent noise input from activating columns. Specified as a percent of a fully grown synapse.
            </summary>
            <param name="stimulusThreshold"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setSynPermInactiveDec(System.Double)">
            <summary>
            The amount by which an inactive synapse is decremented in each round. Specified as a percent of a fully grown synapse.
            </summary>
            <param name="synPermInactiveDec"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setSynPermActiveInc(System.Double)">
            <summary>
            The amount by which an active synapse is incremented in each round. Specified as a percent of a fully grown synapse.
            </summary>
            <param name="synPermActiveInc"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setSynPermConnected(System.Double)">
            <summary>
            The default connected threshold. Any synapse whose permanence value is above the connected threshold is a "connected synapse", 
            meaning it can contribute to the cell's firing.
            </summary>
            <param name="synPermConnected"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setSynPermBelowStimulusInc(System.Double)">
            <summary>
            Sets the increment of synapse permanences below the stimulus threshold
            </summary>
            <param name="synPermBelowStimulusInc"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setSynPermTrimThreshold(System.Double)">
            <summary>
            
            </summary>
            <param name="synPermTrimThreshold"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setMinPctOverlapDutyCycles(System.Double)">
            <summary>
            A number between 0 and 1.0, used to set a floor on how often a column should have at least stimulusThreshold active inputs. Periodically, each
            column looks at the overlap duty cycle of all other columns within its inhibition radius and sets its own internal minimal acceptable duty cycle
            to: minPctDutyCycleBeforeInh * max(other columns' duty cycles).<br/>
            On each iteration, any column whose overlap duty cycle falls below this computed value will  get all of its permanence values boosted up by
            synPermActiveInc. Raising all permanences in response to a sub-par duty cycle before  inhibition allows a cell to search for new inputs when 
            either its previously learned inputs are no longer ever active, or when the vast majority of them have been "hijacked" by other columns.
            </summary>
            <param name="minPctOverlapDutyCycles"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setMinPctActiveDutyCycles(System.Double)">
            <summary>
            A number between 0 and 1.0, used to set a floor on how often a column should be activate. Periodically, each column looks at the activity duty
            cycle of all other columns within its inhibition radius and sets its own internal minimal acceptable duty cycle to:<br/>
            minPctDutyCycleAfterInh * max(other columns' duty cycles).<br/>
            On each iteration, any column whose duty cycle after inhibition falls below this computed value will get its internal boost factor increased.
            </summary>
            <param name="minPctActiveDutyCycles"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setDutyCyclePeriod(System.Int32)">
            <summary>
            The period used to calculate duty cycles. Higher values make it take longer to respond to changes in boost or synPerConnectedCell. 
            Shorter values make it more unstable and likely to oscillate.
            </summary>
            <param name="dutyCyclePeriod"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.setMaxBoost(System.Double)">
            <summary>
            The maximum overlap boost factor. Each column's overlap gets multiplied by a boost factor before it gets considered for inhibition.
            The actual boost factor for a column is number between 1.0 and maxBoost. A boost factor of 1.0 is used if the duty cycle 
            is &gt;= minOverlapDutyCycle, maxBoost is used if the duty cycle is 0, and any duty cycle in between is linearly extrapolated from 
            these 2 end points.
            </summary>
            <param name="maxBoost"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.ToString">
            {@inheritDoc}
        </member>
        <member name="M:NeoCortexApi.Entities.Parameters.GetHashCode">
            Usage of {@link DeepEquals} in order to ensure the same hashcode
            for the same equal content regardless of cycles.
        </member>
        <member name="T:NeoCortexApi.Entities.Pool">
            <summary>
            Convenience container for "bound" <see cref="T:NeoCortexApi.Entities.Synapse"/> values which can be dereferenced from both a Synapse and the <see cref="T:NeoCortexApi.Entities.Connections"/> object.
            All Synapses will have a reference to a <see cref="T:NeoCortexApi.Entities.Pool"/> to retrieve relevant values. In addition, same pool can be referenced from the Connections 
            object externally which will update the Synapse's internal reference.
            </summary>
            <remarks>
            Authors of the JAVA implementation: David Ray
            </remarks>
        </member>
        <member name="P:NeoCortexApi.Entities.Pool.NumInputs">
            <summary>
            Number of inut neuron cells.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.Pool.m_SynapseConnections">
            <summary>
            Allows fast removal of connected synapse indexes. List of connected synapses. 
            These are synapses with permanence value greather than permanence connected threshold.
            See synPermConnected.
            </summary>      
        </member>
        <member name="P:NeoCortexApi.Entities.Pool.m_SynapsesBySourceIndex">
            <summary>
            Indexed according to the source Input Vector Bit (for ProximalDendrites), and source cell (for DistalDendrites).
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.Pool.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="size">Number of connected input neurons. These neurons define RF fo the segment, which owns this pool.</param>
            <param name="numInputs">Total number of input neurons.</param>
        </member>
        <member name="M:NeoCortexApi.Entities.Pool.UpdatePool(System.Double,NeoCortexApi.Entities.Synapse,System.Double)">
            <summary>
            Updates this <see cref="T:NeoCortexApi.Entities.Pool"/>'s store of permanences for the specified <see cref="T:NeoCortexApi.Entities.Synapse"/>
            </summary>
            <param name="synPermConnected"></param>
            <param name="synapse">the synapse who's permanence is recorded</param>
            <param name="permanence">the permanence value to record</param>
        </member>
        <member name="M:NeoCortexApi.Entities.Pool.ResetConnections">
            <summary>
             Resets the current connections in preparation for new permanence adjustments.
             </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.Pool.GetSynapseForInput(System.Int32)">
            <summary>
            Returns the {@link Synapse} connected to the specified input bit index.
            </summary>
            <param name="inputIndex">the input vector connection's index.</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Pool.GetSparsePermanences">
            <summary>
            Returns an array of permanence values
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Pool.GetDensePermanences(System.Int32)">
            <summary>
            Returns a dense array representing the potential pool permanences
            </summary>
            <param name="numInputs"></param>
            <returns></returns>
            <remarks>
            Note: Only called from tests for now...
            </remarks>
        </member>
        <member name="M:NeoCortexApi.Entities.Pool.GetSparsePotential">
            <summary>
            Returns an array of input bit indexes indicating the index of the source. (input vector bit or lateral cell)
            </summary>
            <returns>the sparse array</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Pool.GetDensePotential(NeoCortexApi.Entities.Connections)">
            <summary>
            Returns a dense binary array containing 1's where the input bits are part of this pool.
            </summary>
            <param name="c">the <see cref="T:NeoCortexApi.Entities.Connections"/></param>
            <returns>dense binary array of member inputs</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Pool.GetDenseConnected">
            <summary>
            Returns an binary array whose length is equal to the number of inputs; and where 1's are set in the indexes of this pool's assigned bits.
            </summary>
            <returns>the sparse array</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Pool.Destroy">
            <summary>
            Clears the state of this <see cref="T:NeoCortexApi.Entities.Pool"/>.
            </summary>
        </member>
        <member name="T:NeoCortexApi.Entities.ProximalDendrite">
            <summary>
            Defines th eproximal dentritte segment. Note the segment is used during SP compute operation.
            TM does not use this segment.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.ProximalDendrite.RFPool">
            <summary>
            The pool of synapses.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.ProximalDendrite.#ctor(System.Int32,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="colIndx">The global index of the segment.</param>
            <param name="synapsePermConnected">Permanence threshold value to declare synapse as connected.</param>
            <param name="numInputs">Number of input neorn cells.</param>
        </member>
        <member name="P:NeoCortexApi.Entities.ProximalDendrite.ConnectedInputs">
            <summary>
            Array of indicies of connected inputs. Defines RF. Sometimes also called 'Potential Pool'.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.ProximalDendrite.ClearSynapses(NeoCortexApi.Entities.Connections)">
            <summary>
            Clears all synapses on the segment.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.ProximalDendrite.SetPermanences(NeoCortexApi.Entities.AbstractSparseBinaryMatrix,NeoCortexApi.Entities.HtmConfig,System.Double[],System.Int32[])">
            <summary>
            Sets the permanences for each {@link Synapse} specified by the indexes passed in which identify the input vector indexes associated with the
            <see cref="T:NeoCortexApi.Entities.Synapse"/>. The permanences passed in are understood to be in "sparse" format and therefore require the int array identify their 
            corresponding indexes.
            </summary>
            <param name="connectedCounts"></param>
            <param name="htmConfig"></param>
            <param name="perms">the floating point degree of connectedness</param>
            <param name="inputIndexes"></param>
            <remarks>
            Note: This is the "sparse" version of this method.
            </remarks>
        </member>
        <member name="M:NeoCortexApi.Entities.ProximalDendrite.GetConnectedSynapsesDense">
            <summary>
            Returns an array of synapse indexes as a dense binary array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.ProximalDendrite.GetConnectedSynapsesSparse">
            <summary>
            Returns an sparse array of synapse indexes representing the connected bits.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.Entities.Segment">
            <summary>
            Base class for different types of segments. It which handles the creation of synapses (<seealso cref="T:NeoCortexApi.Entities.Synapse"/>) on behalf of inheriting class types.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.Segment.SegmentIndex">
            <summary>
            The index of the segment.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.Segment.Synapses">
            <summary>
            Synapses connected to the segment.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.Segment.SynapsePermConnected">
            <summary>
            Permanence threshold value to declare synapse as connected.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.Segment.NumInputs">
            <summary>
            Number of input cells. Used by proximal dendrite segment by Spatial Pooler.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.Segment.#ctor">
            <summary>
            Default constructor used by deserializer.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.Segment.#ctor(System.Int32,System.Double,System.Int32)">
            <summary>
            Creates the proximal dentrite segment with specified index.
            </summary>
            <param name="synapsePermConnected">Permanence threshold value to declare synapse as connected.</param>
            <param name="index">Index of segment.</param>
            <param name="numInputs">Number of input neorn cells.</param>
        </member>
        <member name="M:NeoCortexApi.Entities.Segment.CreateSynapse(NeoCortexApi.Entities.Cell,System.Int32,System.Int32)">
            <summary>
            Creates and returns a newly created synapse with the specified source cell, permanence, and index.
            </summary>       
            <param name="sourceCell">This value is typically set to NULL in a case of proximal segment. This is because, proximal segments 
            build synaptic connections from column to the sensory input. They do not cobbect a specific cell inside of the column.</param>
            <param name="index">Sequence within gthe pool.</param>
            <param name="inputIndex">The index of the sensory neuron connected by this synapse.</param>
            <remarks>
            <b>This method is only called for Proximal Synapses.</b> For ProximalDendrites, there are many synapses within a pool, and in that case, the index
            specifies the synapse's sequence order within the pool object, and may be referenced by that index</remarks>
            <returns>Instance of the new synapse.</returns>
            <seealso cref="T:NeoCortexApi.Entities.Synapse"/>
        </member>
        <member name="M:NeoCortexApi.Entities.Segment.GetHashCode">
            <summary>
            Hashcode calculation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Segment.Equals(NeoCortexApi.Entities.Segment)">
            <summary>
            Compares two segments
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Segment.ToString">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.Entities.SegmentActivity">
            <summary>
            Stores the calculus of a temporal cycle.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.SegmentActivity.ActiveSynapses">
            <summary>
            Contains the index of segments with number of synapses with permanence higher than threshold 
            ( <see cref="!:connectedPermanence"/>connectedPermanence), which makes synapse active.
            Dictionary[segment index, number of active synapses].
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.SegmentActivity.PotentialSynapses">
            <summary>
            Dictionary, which holds the number of potential synapses of every segment.
            Potential synspses are all established synapses between receptor cell and the segment's cell. 
            Receprot cell was active cell in the previous cycle.
            Dictionary [segment index, number of potential synapses].
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.SegmentActivity.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.SegmentActivity.Equals(NeoCortexApi.Entities.SegmentActivity)">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.Entities.Synapse">
                 * THI SSGOULD BE VALIDATED. IT SEEMS TO BE WRONG
            * Represents a connection with varying strength which when above 
            * a configured threshold represents a valid connection. 
            * 
            * IMPORTANT: 	For DistalDendrites, there is only one synapse per pool, so the
            * 				synapse's index doesn't really matter (in terms of tracking its
            * 				order within the pool). In that case, the index is a global counter
            * 				of all distal dendrite synapses.
            * 
            * 				For ProximalDendrites, there are many synapses within a pool, and in
            * 				that case, the index specifies the synapse's sequence order within
            * 				the pool object, and may be referenced by that index.
            *    
            
            <summary>
            Implements the synaptic connection.
            ProximalDendrites hold many synapses, which connect columns to the sensory input.
            DistalDendrites build synaptic connections to cells inside of columns.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.Synapse.SourceCell">
            <summary>
            Cell which activates this synapse. On proximal dendrite is this set on NULL. That means proximal dentrites have no presynaptic cell.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.Synapse.SegmentIndex">
            <summary>
            The index of the segment.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.Synapse.InputIndex">
            <summary>
            Index of pre-synaptic cell.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.Synapse.IsDestroyed">
            <summary>
            the flag indicating whether this segment has been destroyed.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.Synapse.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.Synapse.#ctor(NeoCortexApi.Entities.Cell,System.Int32,System.Int32,System.Double)">
            <summary>
            Creates the synapse on the distal segment, which connect cells during temporal learning process.
            </summary>
            <param name="presynapticCell">The cell which connects to the segment.</param>
            <param name="segmentIndex">The index of the segment.</param>
            <param name="synapseIndex">The index of the synapse.</param>
            <param name="permanence">The permanmence value.</param>
        </member>
        <member name="M:NeoCortexApi.Entities.Synapse.#ctor(NeoCortexApi.Entities.Cell,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates the synapse on the PriximalDendrite segment, which connects columns to sensory input.
            </summary>
            <param name="presynapticCell">The cell which connects to the segment.</param>
            <param name="segmentIndex">The index of the segment.</param>
            <param name="inputIndex">The index of the synapse.</param>
        </member>
        <member name="M:NeoCortexApi.Entities.Synapse.SetPresynapticCell(NeoCortexApi.Entities.Cell)">
            <summary>
            Called by <see cref="M:NeoCortexApi.Entities.Connections.DestroySynapse(NeoCortexApi.Entities.Synapse,NeoCortexApi.Entities.DistalDendrite)"/> to assign a reused Synapse to another presynaptic Cell
            </summary>
            <param name="cell">the new presynaptic cell</param>
        </member>
        <member name="M:NeoCortexApi.Entities.Synapse.getPresynapticCell">
            <summary>
            Returns the containing <see cref="T:NeoCortexApi.Entities.Cell"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.Synapse.ToString">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.Entities.TemporalTuple">
            <summary>
            Helpref class, which hold active columns, active segments and mathcing segments. 
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.TemporalTuple.ActiveColumns">
            <summary>
            Holds active columns
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.Topology.#ctor(System.Int32[])">
            Constructs a new {@link AbstractFlatMatrix} object to be configured with specified
            dimensions and major ordering.
            @param shape  the dimensions of this matrix 
            <summary>
            TODO to be added
            </summary>
        </member>
        <member name="T:NeoCortexApi.Entities.HtmSerializer2">
            <summary>
            Serialization class used for serialization and deserialization of primitive types.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.HtmSerializer2.SerializeBegin(System.String,System.IO.StreamWriter)">
            <summary>
            Serializes the begin marker of the type.
            </summary>
            <param name="typeName"></param>
            <param name="sw"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.HtmSerializer2.SerializeEnd(System.String,System.IO.StreamWriter)">
            <summary>
            Serialize the end marker of the type.
            </summary>
            <param name="typeName"></param>
            <param name="sw"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.HtmSerializer2.SerializeValue(System.Int32,System.IO.StreamWriter)">
            <summary>
            Serialize the property of type Int.
            </summary>
            <param name="val"></param>
            <param name="sw"></param> 
        </member>
        <member name="M:NeoCortexApi.Entities.HtmSerializer2.ReadIntValue(System.String)">
            <summary>
            Read the property of type Int.
            </summary>
            <param name="reader"></param>
            <returns>Int</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.HtmSerializer2.SerializeValue(System.Double,System.IO.StreamWriter)">
            <summary>
            Serialize the property of type Double.
            </summary>
            <param name="val"></param>
            <param name="sw"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.HtmSerializer2.ReadDoubleValue(System.String)">
            <summary>
            Read the property of type Double.
            </summary>
            <param name="reader"></param>
            <returns>Double</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.HtmSerializer2.SerializeValue(System.String,System.IO.StreamWriter)">
            <summary>
            Serialize the property of type String.
            </summary>
            <param name="val"></param>
            <param name="sw"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.HtmSerializer2.ReadStringValue(System.String)">
            <summary>
            Read the property of type String.
            </summary>
            <param name="reader"></param>
            <returns>String</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.HtmSerializer2.SerializeValue(System.Int64,System.IO.StreamWriter)">
            <summary>
            Serialize the property of type Long.
            </summary>
            <param name="val"></param>
            <param name="sw"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.HtmSerializer2.ReadLongValue(System.String)">
            <summary>
            Read the property of type Long.
            </summary>
            <param name="reader"></param>
            <returns>Long</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.HtmSerializer2.SerializeValue(System.Boolean,System.IO.StreamWriter)">
            <summary>
            Serialize the Bool.
            </summary>
            <param name="val"></param>
            <param name="sw"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.HtmSerializer2.ReadBoolValue(System.String)">
            <summary>
            Read the property of type Long.
            </summary>
            <param name="reader"></param>
            <returns>Bool</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.HtmSerializer2.SerializeValue(System.Double[],System.IO.StreamWriter)">
            <summary>
            Serialize the array of type Double.
            </summary>
            <param name="val"></param>
            <param name="sw"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoCortexApi.Entities.HtmSerializer2.ReadArrayDouble(System.String)" -->
        <member name="M:NeoCortexApi.Entities.HtmSerializer2.SerializeValue(System.Int32[],System.IO.StreamWriter)">
            <summary>
            Serialize the array of type Int.
            </summary>
            <param name="val"></param>
            <param name="sw"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoCortexApi.Entities.HtmSerializer2.ReadArrayInt(System.String)" -->
        <member name="M:NeoCortexApi.Entities.HtmSerializer2.SerializeValue(NeoCortexApi.Entities.Cell[],System.IO.StreamWriter)">
            <summary>
            Serialize the array of cells.
            </summary>
            <param name="val"></param>
            <param name="sw"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.HtmSerializer2.SerializeValue(System.Collections.Generic.Dictionary{System.String,System.Int32},System.IO.StreamWriter)">
            <summary>
            Serialize the dictionary with key:string and value:int.
            </summary>
            <param name="keyValues"></param>
            <param name="sw"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoCortexApi.Entities.HtmSerializer2.ReadDictSIValue(System.String)" -->
        <member name="M:NeoCortexApi.Entities.HtmSerializer2.SerializeValue(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.IO.StreamWriter)">
            <summary>
            Serialize the dictionary with key:int and value:int.
            </summary>
            <param name="keyValues"></param>
            <param name="sw"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoCortexApi.Entities.HtmSerializer2.ReadDictionaryIIValue(System.String)" -->
        <member name="M:NeoCortexApi.Entities.HtmSerializer2.SerializeValue(System.Collections.Generic.Dictionary{System.String,System.Int32[]},System.IO.StreamWriter)">
            <summary>
            Serialize the dictionary with key:string and value:int[].
            </summary>
            <param name="keyValues"></param>
            <param name="sw"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoCortexApi.Entities.HtmSerializer2.ReadDictSIarray(System.String)" -->
        <member name="M:NeoCortexApi.Entities.HtmSerializer2.SerializeValue(System.Collections.Generic.List{NeoCortexApi.Entities.DistalDendrite},System.IO.StreamWriter)">
            <summary>
            Serialize the List of DistalDendrite.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.HtmSerializer2.SerializeValue(System.Collections.Generic.List{System.Int32},System.IO.StreamWriter)">
            <summary>
            Serialize the List of Integers.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NeoCortexApi.Entities.HtmSerializer2.SerializeValue(System.Collections.Generic.Dictionary{NeoCortexApi.Entities.Segment,System.Collections.Generic.List{NeoCortexApi.Entities.Synapse}},System.IO.StreamWriter)" -->
        <!-- Badly formed XML comment ignored for member "M:NeoCortexApi.Entities.HtmSerializer2.SerializeValue(System.Collections.Generic.Dictionary{NeoCortexApi.Entities.Cell,System.Collections.Generic.List{NeoCortexApi.Entities.DistalDendrite}},System.IO.StreamWriter)" -->
        <member name="M:NeoCortexApi.Entities.IDistributedArray.GetValue(System.Int32)">
            <summary>
            Gets value from single dimension array.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.IDistributedArray.GetValue(System.Int32[])">
            <summary>
            Get value from two-dim array.
            </summary>
            <param name="indexes"></param>
            <returns></returns>
        </member>
        <member name="P:NeoCortexApi.Entities.IDistributedArray.Rank">
            <summary>
            Number of dimensions
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.IDistributedArray.Dimensions">
            <summary>
            Dimensions
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.IDistributedArray.SetRowValuesTo(System.Int32,System.Object)">
            <summary>
            Sets all values of specified row on specified value.
            </summary>
            <param name="rowIndex"></param>
            <param name="newVal"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.IDistributedDictionary`2.GetObjects(`0[])">
            <summary>
            Gets the list of objects assotiated with keys.
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="T:NeoCortexApi.Entities.IHtmDistCalculus">
            <summary>
            If imlementation of an object includes Actors, it should be merked with this interface.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.IHtmDistCalculus.HtmConfig">
            <summary>
            All required HTM configuration in serializable form.
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.IHtmDistCalculus.Nodes">
            <summary>
            Gets number of nodes in distributed cluster.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.IHtmDistCalculus.InitializeColumnPartitionsDist(System.Collections.Generic.ICollection{NeoCortexApi.Entities.KeyPair})">
            <summary>
            Gets partitions (nodes) with assotiated indexes.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:NeoCortexApi.Entities.InMemoryArray.Dimensions">
            <summary>
            Gets dimensions of distributed array.
            </summary>
        </member>
        <member name="T:NeoCortexApi.Entities.InMemoryDistributedDictionary`2">
            <summary>
            Distributes huge dictionary across mutliple dictionaries. Used mainly for testing purposes.
            Special case of this dictionary is with number of nodes = 1. In this case dictionary is redused 
            to a single dictionary, which corresponds original none-distributed implementation of SP and TM.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:NeoCortexApi.Entities.InMemoryDistributedDictionary`2.AddOrUpdate(System.Collections.Generic.ICollection{NeoCortexApi.Entities.KeyPair})">
            <summary>
            Adds list of objects to dictioanary.
            </summary>
            <param name="keyValuePairs"></param>
        </member>
        <member name="F:NeoCortexApi.Entities.InMemoryDistributedDictionary`2.currentDictIndex">
            <summary>
            Current dictionary list in enemerator.
            </summary>
        </member>
        <member name="F:NeoCortexApi.Entities.InMemoryDistributedDictionary`2.currentIndex">
            <summary>
            Current index in currentdictionary
            </summary>
        </member>
        <member name="P:NeoCortexApi.Entities.InMemoryDistributedDictionary`2.HtmConfig">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="T:NeoCortexApi.Entities.SparseBinaryMatrix">
            <summary>
            Implementation of a sparse matrix which contains binary integer values only.
            </summary>
            <remarks>
            Author cogmission
            </remarks>
        </member>
        <member name="F:NeoCortexApi.Entities.SparseBinaryMatrix.backingArray">
            <summary>
            Holds the matrix with connections between columns and inputs.
            </summary>
        </member>
        <member name="M:NeoCortexApi.Entities.SparseBinaryMatrix.#ctor(System.Int32[])">
            <summary>
            Constructs a new <see cref="T:NeoCortexApi.Entities.SparseBinaryMatrix"/> with the specified dimensions (defaults to row major ordering)
            </summary>
            <param name="dimensions">each indexed value is a dimension size</param>
        </member>
        <member name="M:NeoCortexApi.Entities.SparseBinaryMatrix.#ctor(System.Int32[],System.Boolean,NeoCortexApi.Entities.IDistributedArray)">
            <summary>
            Constructs a new <see cref="T:NeoCortexApi.Entities.SparseBinaryMatrix"/> with the specified dimensions, allowing the specification of column major ordering if desired. 
            (defaults to row major ordering)
            </summary>
            <param name="dimensions">each indexed value is a dimension size</param>
            <param name="useColumnMajorOrdering">if true, indicates column first iteration, otherwise row first iteration is the default (if false).</param>
            <param name="distArray"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.SparseBinaryMatrix.GetSlice(System.Int32[])">
            <summary>
            Returns the slice specified by the passed in coordinates. The array is returned as an object, therefore it is the caller's
            responsibility to cast the array to the appropriate dimensions.
            </summary>
            <param name="coordinates">the coordinates which specify the returned array</param>
            <returns>the array specified. Throws <see cref="T:System.ArgumentException"/> if the specified coordinates address an actual value instead of the array holding it.</returns>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:NeoCortexApi.Entities.SparseBinaryMatrix.GetRow``1(NeoCortexApi.Entities.IDistributedArray,System.Int32)">
            <summary>
            Gets the access to a row inside of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.SparseBinaryMatrix.RightVecSumAtNZ(System.Int32[],System.Int32[])">
            <summary>
            Fills the specified results array with the result of the matrix vector multiplication.
            </summary>
            <param name="inputVector">the right side vector</param>
            <param name="results">the results array</param>
        </member>
        <member name="M:NeoCortexApi.Entities.SparseBinaryMatrix.RightVecSumAtNZ(System.Int32[],System.Int32[],System.Double)">
            <summary>
            Fills the specified results array with the result of the 
            matrix vector multiplication.
            </summary>
            <param name="inputVector">the right side vector</param>
            <param name="results">the result array</param>
            <param name="stimulusThreshold"></param>
        </member>
        <member name="M:NeoCortexApi.Entities.SparseBinaryMatrix.set(System.Int32,System.Int32[])">
            <summary>
            Sets the value to be indexed at the index
            computed from the specified coordinates.
            </summary>
            <param name="value">the object to be indexed.</param>
            <param name="coordinates">the row major coordinates [outer --> ,...,..., inner]</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Entities.SparseBinaryMatrix.set(System.Int32[],System.Int32[])">
            <summary>
            Sets the specified values at the specified indexes.
            </summary>
            <param name="indexes">indexes of the values to be set</param>
            <param name="values">the values to be indexed.</param>
            <returns>this <see cref="T:NeoCortexApi.Entities.AbstractSparseBinaryMatrix"/> implementation</returns>
        </member>
        <member name="M:NeoCortexApi.Entities.SparseBinaryMatrix.ClearStatistics(System.Int32)">
            <summary>
            Clears the true counts prior to a cycle where they're being set
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:NeoCortexApi.HtmCompute.GetCoordinatesFromIndex(System.Int32,NeoCortexApi.Entities.HtmModuleTopology)">
            <summary>
            Calculates multidimensional coordinates from flat array index.
            </summary>
            <param name="index">Flat index.</param>
            <returns>Coordinates in multidimensional space.</returns>
        </member>
        <member name="M:NeoCortexApi.HtmCompute.Reverse(System.Int32[])">
            <summary>
            Reurns reverse array
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.HtmCompute.MapPotential(NeoCortexApi.Entities.HtmConfig,System.Int32,System.Random)">
            <summary>
            Maps a column to its input bits. This method encapsulates the topology of the region. It takes the index of the column as an argument and calculates 
            indexes of the input vector that represent column's potential pool. The return value is a list containing the indices of 
            connected input bits. The current implementation of the base class only supports a 1 dimensional topology of columns with a 1 dimensional topology of inputs. 
            To extend this class to support 2-D topology you will need to override this method. Examples of the expected output of this method:
            <list type="bullet">
                <item>
                If the potentialRadius is greater than or equal to the entire input space, (global visibility), then this method returns an array filled with 
                all the indices
                </item>
                <item>
                If the topology is one dimensional, and the potentialRadius is 5, this method will return an array containing 5 consecutive values centered on 
                the index of the column (wrapping around if necessary).
                </item>
                <item>If the topology is two dimensional (not implemented), and the potentialRadius is 5, the method should return an array containing 25 '1's, where 
                the exact indices are to be determined by the mapping from 1-D index to 2-D position.
                </item>
            </list>
            </summary>
            <param name="htmConfig">The configuration used in <see cref="T:NeoCortexApi.Entities.Connections"/>.</param>
            <param name="columnIndex">The index identifying a column in the permanence, potential and connectivity matrices.</param>
            <param name="rnd"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.HtmCompute.MapColumn(System.Int32,NeoCortexApi.Entities.HtmModuleTopology,NeoCortexApi.Entities.HtmModuleTopology)">
            <summary>
            Uniform Column Mapping <br></br>
            Maps a column to its respective input index, keeping to the topology of the region. It takes the index of the column as an argument and determines 
            what is the index of the flattened input vector that is to be the center of the column's potential pool. It distributes the columns over the inputs 
            uniformly. The return value is an integer representing the index of the input bit. Examples of the expected output of this method:
            <list type="bullet">
                <item>
                If the topology is one dimensional, and the column index is 0, this method will return the input index 0. If the column index is 1, and there are 
                3 columns over 7 inputs, this method will return the input index 3.
                </item>
                <item>If the topology is two dimensional, with column dimensions [3, 5] and input dimensions [7, 11], and the column index is 3, the method returns
                input index 8.
                </item>
            </list>
            </summary>
            <param name="columnIndex">The index identifying a column in the permanence, potential and connectivity matrices.</param>
            <param name="colTop"></param>
            <param name="inpTop"></param>
            <returns>Flat index of mapped column.</returns>
        </member>
        <member name="M:NeoCortexApi.HtmCompute.GetWrappingNeighborhood(System.Int32,System.Int32,NeoCortexApi.Entities.HtmModuleTopology)">
            <summary>
            Gets indexes of neighborhood cells within centered radius  
            </summary>
            <param name="centerIndex">The index of the point. The coordinates are expressed as a single index by
            using the dimensions as a mixed radix definition. For example, in dimensions 42x10, the point [1, 4] is index 1*420 + 4*10 = 460.
            </param>   
            <param name="radius"></param>
            <param name="topology"></param>
            <returns>The points in the neighborhood, including centerIndex.</returns>
        </member>
        <member name="M:NeoCortexApi.HtmCompute.GetNeighborhood(System.Int32,System.Int32,NeoCortexApi.Entities.HtmModuleTopology)">
            <summary>
            Gets the list of neighborhood columns around the centar with the given radius in the specified topology.
            </summary>
            <param name="centerIndex"></param>
            <param name="radius"></param>
            <param name="topology"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.HtmCompute.GetFlatIndexFromCoordinates(System.Int32[],NeoCortexApi.Entities.HtmModuleTopology)">
            <summary>
            Returns a flat index computed from the specified coordinates.
            </summary>
            <param name="coordinates">  The index of the point</param>
            <param name="topology"></param>
            <returns>using the dimensions as a mixed radix definition.For example, in dimensions 
            42x10, the point [1, 4] is index 1*420 + 4*10 = 460.</returns>
        </member>
        <member name="M:NeoCortexApi.HtmCompute.GetInputNeighborhood(System.Boolean,NeoCortexApi.Entities.HtmModuleTopology,System.Int32,System.Int32)">
            <summary>
            Gets a neighborhood of inputs. Simply calls topology.wrappingNeighborhood or topology.neighborhood. A subclass can insert different topology behavior by overriding this method.
            </summary>
            <param name="isWrapAround"></param>
            <param name="inputTopology"></param>
            <param name="centerInput">The center of the neighborhood.</param>
            <param name="potentialRadius">Span of the input field included in each neighborhood</param>
            <returns>The input's in the neighborhood. (1D)</returns>
        </member>
        <member name="M:NeoCortexApi.HtmCompute.InitSynapsePermanences(NeoCortexApi.Entities.HtmConfig,System.Int32[],System.Random)">
            <summary>
            Initializes the permanences of a column. The method returns a 1-D array the size of the input, where each entry in the array represents the initial 
            permanence value between the input bit at the particular index in the array, and the column represented by the 'index' parameter.
            </summary>
            <param name="htmConfig">An array specifying the potential pool of the column. Permanence values will only be generated for input bits corresponding to 
                                    indices for which the mask value is 1. <b>WARNING</b>: potentialPool is sparse, not an array of "1's"
                                    </param>
            <param name="potentialPool"></param>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.HtmCompute.InitPermConnected(System.Double,System.Double,System.Random)">
            <summary>
            Returns a randomly generated permanence value for a synapse that is initialized in a connected state. The basic idea here is to initialize
            permanence values very close to <c>synPermConnected</c> so that a small number of learning steps could make it disconnected or connected.
            </summary>
            <param name="synPermMax"></param>
            <param name="synPermConnected"></param>
            <param name="rnd"></param>
            <returns>a randomly generated permanence value</returns>
            <remarks>
            Note: experimentation was done a long time ago on the best way to initialize permanence values, but the history for this particular scheme has been lost.
            </remarks>
        </member>
        <member name="M:NeoCortexApi.HtmCompute.InitPermNonConnected(System.Double,System.Random)">
            <summary>
            Returns a randomly generated permanence value for a synapses that is to be initialized in a non-connected state.
            </summary>
            <param name="synPermConnected"></param>
            <param name="rnd">Random generator to be used to generate permanence.</param>
            <returns>Permanence value.</returns>
        </member>
        <member name="M:NeoCortexApi.HtmCompute.CalcAvgSpanOfConnectedSynapses(NeoCortexApi.Entities.Column,NeoCortexApi.Entities.HtmConfig)">
            <summary>
            It traverses all connected synapses of the column and calculates the span, which synapses
            spans between all input bits. Then it calculates average of spans accross all dimensions. 
            </summary>
            <param name="column"></param>
            <param name="htmConfig">Topology</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.HtmCompute.RaisePermanenceToThreshold(NeoCortexApi.Entities.HtmConfig,System.Double[],System.Int32[])">
            <summary>
            This method ensures that each column has enough connections to input bits
            to allow it to become active. Since a column must have at least
            'stimulusThreshold' overlaps in order to be considered during the
            inhibition phase, columns without such minimal number of connections, even
            if all the input bits they are connected to turn on, have no chance of
            obtaining the minimum threshold. For such columns, the permanence values
            are increased until the minimum number of connections are formed.        /// 
            </summary>
            <param name="htmConfig"></param>
            <param name="perm"></param>
            <param name="maskPotential"></param>
        </member>
        <member name="M:NeoCortexApi.HtmCompute.UpdatePermanencesForColumn(NeoCortexApi.Entities.HtmConfig,System.Double[],NeoCortexApi.Entities.Column,System.Int32[],System.Boolean)">
            <summary>
            This method updates the permanence matrix with a column's new permanence values. The column is identified by its index, which reflects the row in
            the matrix, and the permanence is given in 'sparse' form, i.e. an array whose members are associated with specific indexes. It is in charge of 
            implementing 'clipping' - ensuring that the permanence values are always between 0 and 1 - and 'trimming' - enforcing sparseness by zeroing out
            all permanence values below 'synPermTrimThreshold'. It also maintains the consistency between 'permanences' (the matrix storing the permanence values), 
            'connectedSynapses', (the matrix storing the bits each column is connected to), and 'connectedCounts' (an array storing the number of input bits each 
            column is connected to). Every method wishing to modify the permanence matrix should do so through this method.
            </summary>
            <param name="htmConfig">the configuration used in <see cref="T:NeoCortexApi.Entities.Connections"/>.</param>
            <param name="perm">An array of permanence values for a column. The array is "dense", i.e. it contains an entry for each input bit, even if the permanence value is 0.</param>
            <param name="column">The column in the permanence, potential and connectivity matrices.</param>
            <param name="maskPotential">The indexes of inputs in the specified <see cref="T:NeoCortexApi.Entities.Column"/>'s pool.</param>
            <param name="raisePerm">a boolean value indicating whether the permanence values</param>
        </member>
        <member name="P:NeoCortexApi.IHtmDistConfig.ConnectionTimeout">
            <summary>
            Time to wait to connect to Akka Cluster.
            </summary>
        </member>
        <member name="P:NeoCortexApi.IHtmDistConfig.Nodes">
            <summary>
            Address of all nodes in cluster.
            </summary>
        </member>
        <member name="P:NeoCortexApi.IHtmDistConfig.PageSize">
            <summary>
            Upload and Download page size.
            </summary>
        </member>
        <member name="P:NeoCortexApi.IHtmDistConfig.PartitionsPerNode">
            <summary>
            Number of partitions per node. Every partition at node will hold a number of elements.
            Note, a single actor implements a partition.
            </summary>
        </member>
        <member name="T:NeoCortexApi.IHtmModule`2">
            <summary>
            Defines the interface, which needs to be implemented by all classes, which can be inserted as a layer in region.
            </summary>
        </member>
    </members>
</doc>
