<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NeoCortexArrayLib</name>
    </assembly>
    <members>
        <member name="T:NeoCortexApi.Utility.ArrayUtils">
            <summary>
            Utilities to match some of the functionality found in Python's Numpy.
            </summary>
            <remarks>author David Ray</remarks>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.ArrToString(System.Int32[])">
            <summary>
            TODO to be added
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.ArrToString(System.Int32[][])">
            <summary>
            TODO to be added
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Product(System.Int32[])">
            <summary>
            Returns the product of each integer in the specified array.
            </summary>
            <param name="dims"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.ToIntArray(System.Double[])">
            <summary>
            Returns an array with the same shape and the contents converted to integers.
            </summary>
            <param name="doubs">an array of doubles.</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.ToDoubleArray(System.Int32[])">
            <summary>
            Returns an array with the same shape and the contents converted to doubles.
            </summary>
            <param name="ints">an array of ints.</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Modulo(System.Int32,System.Int32)">
            <summary>
            Performs a modulus operation in Python style.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>Modulo.</returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Modulo(System.Int32[],System.Int32)">
            <summary>
            Performs a modulus on every index of the first argument using the second argument and places the result in the same index of
            the first argument.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Maximum(System.Double[],System.Double)">
            <summary>
            Returns a double array whose values are the maximum of the value in the array and the max value argument.
            </summary>
            <param name="doubs"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.MaxBetween(System.Int32[],System.Int32[])">
            <summary>
            Returns an array of identical shape containing the maximum of the values between each corresponding index.Input arrays
            must be the same length.
            </summary>
            <param name="arr1"></param>
            <param name="arr2"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.MinBetween(System.Int32[],System.Int32[])">
            <summary>
            Returns an array of identical shape containing the minimum of the values between each corresponding index. Input arrays
            must be the same length.
            </summary>
            <param name="arr1"></param>
            <param name="arr2"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.ReadCsvFileTest(System.String)">
            <summary>
            TODO-Do we need this method here???
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Divide(System.Double[],System.Double[],System.Double,System.Double)">
            <summary>
            Returns an array whose members are the quotient of the dividend array values and the divisor array values.
            </summary>
            <param name="dividend"></param>
            <param name="divisor"></param>
            <param name="dividendAdjustment"></param>
            <param name="divisorAdjustment"></param>
            <returns>throw ArgumentException if the two argument arrays are not the same length.</returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Divide(System.Int32[],System.Int32[])">
            <summary>
            Returns an array whose members are the quotient of the dividend array values and the divisor array values.
            </summary>
            <param name="dividend"></param>
            <param name="divisor"></param>
            <returns>throw ArgumentException if the two argument arrays are not the same length.</returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Divide(System.Double[],System.Double)">
            <summary>
            Returns an array whose members are the quotient of the dividend array values and the divisor value.
            </summary>
            <param name="dividend"></param>
            <param name="divisor"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Multiply(System.Double[],System.Double[],System.Double,System.Double)">
            <summary>
            Returns an array whose members are the product of the multiplicand array values and the factor array values.
            </summary>
            <param name="multiplicand"></param>
            <param name="factor"></param>
            <param name="multiplicandAdjustment"></param>
            <param name="factorAdjustment"></param>
            <returns>throw ArgumentException if the two argument arrays are not the same length.</returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.IndexWhere``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Gets index of item in array, which satisfies specified condition.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.IndexesWithNonZeros(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets index of item in array, which satisfies specified condition.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Multiply(System.Double[],System.Int32[])">
            <summary>
            Returns an array whose members are the product of the multiplicand array values and the factor array values.
            </summary>
            <param name="multiplicand"></param>
            <param name="factor"></param>
            <returns>throw ArgumentException if the two argument arrays are not the same length.</returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Multiply(System.Int32[],System.Int32)">
            <summary>
            Returns a new array containing the result of multiplying each index of the specified array by the 2nd parameter.</summary>
            <param name="array"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Multiply(System.Double[],System.Double)">
            <summary>
            Returns a new array containing the result of multiplying each index of the specified array by the 2nd parameter.
            </summary>
            <param name="array"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Subtract(System.Int32[],System.Int32[])">
            <summary>
            Returns an integer array containing the result of subtraction operations between corresponding indexes of the specified arrays.
            </summary>
            <param name="minuend"></param>
            <param name="subtrahend"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Average(System.Int32[])">
            <summary>
            Returns the average of all the specified array contents.
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Average(System.Double[])">
            <summary>
            Returns the average of all the specified array contents.
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Variance(System.Double[],System.Double)">
            <summary>
            Computes and returns the variance.
            </summary>
            <param name="arr"></param>
            <param name="mean"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Variance(System.Double[])">
            <summary>
            Computes and returns the variance.
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Add(System.Int32[],System.Int32)">
            <summary>
            Returns the passed in array with every value being altered by the addition of the specified amount.
            </summary>
            <param name="arr"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.I_add(System.Int32[],System.Int32[])">
            <summary>
            Returns the passed in array with every value being altered by the addition of the specified double amount at the same index.
            </summary>
            <param name="arr"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.AddOffset(System.Double[],System.Double[])">
            <summary>
            Returns the passed in array with every value being altered by the addition of the specified double amount at the same index.
            </summary>
            <param name="arr"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.AddAmount(System.Double[],System.Double)">
            <summary>
            Returns the passed in array with every value being altered by the addition of the specified double amount.
            </summary>
            <param name="arr"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Sum(System.Int32[])">
            <summary>
            Returns the sum of all contents in the specified array.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Sum(System.Double[])">
            <summary>
            Returns the sum of all contents in the specified array.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.PositiveRemainder(System.Double,System.Double)">
            <summary>
            Another utility to account for the difference between Python and Java. Here the modulo operator is defined differently.
            </summary>
            <param name="n"></param>
            <param name="divisor"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Range(System.Int32,System.Int32)">
            <summary>
            Returns an array which starts from lowerBounds (inclusive) and ends at the upperBounds (exclusive).
            </summary>
            <param name="lowerBounds"></param>
            <param name="upperBounds"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Shuffle(System.Int32[])">
            <summary>
            Fisher-Yates implementation which shuffles the array contents.
            </summary>
            <param name="array">the array of ints to shuffle.</param>
            <returns>shuffled array</returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Suffles the list of elements.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Replace(System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <summary>
            Replaces the range specified by "start" and "end" of "orig" with the array of replacement ints found in "replacement".
            </summary>
            <param name="start">start index of "orig" to be replaced.</param>
            <param name="end">end index of "orig" to be replaced.</param>
            <param name="orig">the array containing entries to be replaced by "replacement".</param>
            <param name="replacement">the array of ints to put in "orig" in the indicated indexes.</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Unique(System.Int32[])">
            <summary>
            Returns a sorted unique (dupicates removed) array of integers.
            </summary>
            <param name="array">an unsorted array of integers with possible duplicates.</param>
            <returns>sorted unique (dupicates removed) array of integers.</returns>
        </member>
        <member name="T:NeoCortexApi.Utility.ArrayUtils.CoordinateAssembler">
            <summary>
            Helper Class for recursive coordinate assembling
            </summary>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.CoordinateAssembler.Assemble(System.Collections.Generic.List{System.Int32[]})">
            <summary>
            TODO to be added
            </summary>
            <param name="dimensions"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.CoordinateAssembler.#ctor(System.Collections.Generic.List{System.Int32[]})">
            <summary>
            TODO to be added
            </summary>
            <param name="dimensions"></param>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.CoordinateAssembler.Process(System.Int32)">
            <summary>
            TODO to be added
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.DimensionsToCoordinateList(System.Collections.Generic.List{System.Int32[]})">
            <summary>
            Called to merge a list of dimension arrays into a sequential row-major indexed list of coordinates.
            </summary>
            <param name="dimensions">a list of dimension arrays, each array being a dimension of an n-dimensional array.</param>
            <returns>a list of n-dimensional coordinates in row-major format.</returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.SetIndexesTo(System.Double[],System.Int32[],System.Double)">
            <summary>
            Sets the values in the specified values array at the indexes specified,
            to the value "setTo".
            </summary>
            <param name="valuesToSet">The values to alter if at the specified indexes.</param>
            <param name="indexes">the indexes of the values array to alter.</param>
            <param name="val">the value to set at the specified indexes.</param>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.SetIndexesTo(System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Sets the values in the specified values array at the indexes specified, to the value <paramref name="val"/>.
            </summary>
            <param name="values">the values to alter if at the specified indexes.</param>
            <param name="indexes">the indexes of the values array to alter.</param>
            <param name="val">the value to set at the specified indexes.</param>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.SetRangeTo(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the values in range start to stop to the value specified. If stop &lt; 0, then stop indicates the number of places
            counting from the length of <paramref name="values"/> back.
            </summary>
            <param name="values">the array to alter.</param>
            <param name="start">the start index (inclusive).</param>
            <param name="stop">the end index (exclusive).</param>
            <param name="setTo">the value to set the indexes to.</param>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Sample(System.Int32[],System.Int32[],System.Random)">
            <summary>
            Returns a random, sorted, and  unique array of the specified sample size of selections from the specified list of choices.
            </summary>
            <param name="choices">the list of choices to select from.</param>
            <param name="selectedIndices">the number of selections in the returned sample.</param>
            <param name="random">a random number generator.</param>
            <returns>a sample of numbers of the specified size.</returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Sample(System.Int32,System.Random)">
            <summary>
            Returns a double[] filled with random doubles of the specified size.
            </summary>
            <param name="sampleSize"></param>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.EnsureBetweenMinAndMax(System.Double[],System.Double,System.Double)">
            <summary>
            Ensures that each entry in the specified array has a min value equal to or greater than the specified min and a maximum value less
            than or equal to the specified max. For example, if min = 0, then negative permanence values will be rounded to 0.
            Similarly, high permanences will be rounded by maximal value.
            </summary>
            <param name="values">the values to clip.</param>
            <param name="min">the minimum value.</param>
            <param name="max">the maximum value.</param>
            <returns></returns>
            TODO min max ???
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Clip(System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Ensures that each entry in the specified array has a min value equal to or greater than the min at the specified index
            and a maximum value less than or equal to the max at the specified index.
            </summary>
            <param name="values">the values to clip.</param>
            <param name="min">the minimum value.</param>
            <param name="max">the maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Clip(System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Ensures that each entry in the specified array has a min value equal to or greater than the min at the specified index 
            and a maximum value less than or equal to the max at the specified index. 
            </summary>
            <param name="values">the values to clip.</param>
            <param name="max">the minimum value.</param>
            <param name="adj">the adjustment amount.</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.ValueGreaterCount(System.Double,System.Double[])">
            <summary>
            Returns the count of values in the specified array that are greater than the specified compare value.
            </summary>
            <param name="compare">the value to compare to.</param>
            <param name="array">the values being compared.</param>
            <returns>the count of values greater.</returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.ValueGreaterOrEqualCount(System.Double,System.Double[])">
            <summary>
            Returns the count of values in the specified array that are greater than or equal to, the specified compare value.
            </summary>
            <param name="compare">the value to compare to.</param>
            <param name="array">the values being compared.</param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.GreaterThanAtIndex(System.Double,System.Double[],System.Int32[])">
            <summary>
            Returns the number of values in the specified array that are greater than the specified 'compare' value.
            </summary>
            <param name="compareValue">the value to compare to.</param>
            <param name="array">the values being compared.</param>
            <param name="indexes">indices of array being compared.</param>
            <returns>the count of values greater.</returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.NGreatest(System.Double[],System.Int32)">
            <summary>
            Returns an array containing the n greatest values.
            </summary>
            <param name="array"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.RaiseValuesBy(System.Double,System.Double[])">
            <summary>
            Raises the values in the specified array by the amount specified.
            </summary>
            <param name="amount">the amount to raise the values.</param>
            <param name="values">the values to raise.</param>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.RaiseValuesBy(System.Double,System.Double[],System.Int32[])">
            <summary>
            Raises the values at the indexes specified by the amount specified.
            </summary>
            <param name="amount">the amount to raise the values.</param>
            <param name="values">the values to raise.</param>
            <param name="indicesToRaise">indices of values to be raised.</param>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.RaiseValuesBy(System.Double[],System.Double[])">
            <summary>
            Raises the values at the indexes specified by the amount specified.
            </summary>
            <param name="amounts">the amounts to raise the values.</param>
            <param name="values">the values to raise.</param>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.RaiseValuesBy(System.Int32,System.Int32[],System.Int32[])">
            <summary>
            Raises the values at the indicated indexes, by the amount specified.
            </summary>
            <param name="amount"></param>
            <param name="indices"></param>
            <param name="values"></param>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.IsSparse(System.Int32[])">
            <summary>
            Returns a flag indicating whether the specified array is a sparse array of 0's and 1's or not.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.LessOrEqualXThanSetToY(System.Double[],System.Double,System.Double)">
            <summary>
            Makes all values in the specified array which are less than or equal to the specified <paramref name="comparingValue"/> value,
            equal to the specified <paramref name="valueToBeSet"/>.
            </summary>
            <param name="array">Traverses through this array and set the element on 'y' if the current value of the element is less than 'x'. </param>
            <param name="comparingValue">the comparison.</param>
            <param name="valueToBeSet">the value to set if the comparison fails.</param>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.GreaterThanXThanSetToYInB(System.Int32[],System.Double[],System.Int32,System.Double)">
            <summary>
            Sets value to "y" in "targetB" if the value in the same index in "sourceA" is bigger than "x".
            </summary>
            <param name="sourceA">array to compare elements with X.</param>
            <param name="targetB">array to set elements to Y.</param>
            <param name="x">the comparison.</param>
            <param name="y">the value to set if the comparison fails.</param>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Max(System.Int32[])">
            <summary>
            Returns the maximum value in the specified array.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Max(System.Double[])">
            <summary>
            Returns the maximum value in the specified array.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.ListOfValuesByIndicies(System.Double[],System.Int32[])">
            <summary>
            Returns a new array containing the items specified from the source array by the indexes specified.
            </summary>
            <param name="source"></param>
            <param name="indexes"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Sub(System.Int32[],System.Int32[])">
            <summary>
            Returns a new array containing the items specified from the source array by the indexes specified.
            </summary>
            <param name="source"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Sub(System.Int32[][],System.Int32[])">
            <summary>
            Returns a new 2D array containing the items specified from the source array by the indexes specified.
            </summary>
            <param name="source"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Min(System.Int32[])">
            <summary>
            Returns the minimum value in the specified array.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Min(System.Double[])">
            <summary>
            Returns the minimum value in the specified array.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Reverse(System.Int32[])">
            <summary>
            Returns a copy of the specified integer array in reverse order.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Reverse(System.Double[])">
            <summary>
            Returns a copy of the specified double array in
            reverse order.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Or(System.Int32[],System.Int32[])">
            <summary>
            Returns a new int array containing the or'd on bits of both arg1 and arg2.
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.And(System.Int32[],System.Int32[])">
            <summary>
            Returns a new int array containing the and'd bits of both arg1 and arg2.
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Tail(System.Int32[])">
            <summary>
            Copies the passed array <tt>original</tt> into a new array except first element and returns it.
            </summary>
            <param name="original">the array from which a tail is taken.</param>
            <returns>a new array containing the tail from the original array.</returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.SetValue(System.Array,System.Int32,System.Int32[])">
            <summary>
            Set <tt>value</tt> for <tt>array</tt> at specified position <tt>indexes</tt>.
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <param name="indexes"></param>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.GetValue(System.Array,System.Int32[])">
            <summary>
            Get <tt>value</tt> for <tt>array</tt> at specified position <tt>indexes</tt>.
            </summary>
            <param name="array"></param>
            <param name="indexes"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.FillArray(System.Object,System.Int32)">
            <summary>
            Assigns the specified int value to each element of the specified any dimensional array of ints.
            </summary>
            <param name="array"></param>
            <param name="value"></param>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.InitArray``1(``0[],``0)">
            <summary>
            Initializes the array with the specific value.
            </summary>
            <param name="array"></param>
            <param name="val"></param>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Fill(System.Array,System.Object)">
            <summary>
            Fills the array with specified value.
            </summary>
            <param name="array"></param>
            <param name="value"></param>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Fill(System.Array,System.Int32)">
            <summary>
            TODO to be added
            </summary>
            <param name="array"></param>
            <param name="value"></param>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.GetRow``1(``0[0:,0:],System.Int32)">
            <summary>
            Gets the access to a row inside of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.GetRow2(System.Int32[0:,0:],System.Int32)">
            <summary>
            TODO to be added
            </summary>
            <param name="array"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.GetRowNotUsed``1(``0[0:,0:],System.Int32)">
            <summary>
            Gets the access to a row inside of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.AggregateArray(System.Object)">
            <summary>
            Aggregates all element of multi dimensional array of ints.
            </summary>
            <param name="array"></param>
            <returns>sum of all array elements</returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.AreEqual``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            TODO to be added
            </summary>
            <param name="dict1"></param>
            <param name="dict2"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.FlipBit(System.Int32[],System.Double)">
            <summary>
            This method is used to flip bits of an binary array.
            </summary>
            <param name="oriArr"></param>
            <param name="bitPerc"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.RemoveIndices(System.Double[],System.Int32)">
            <summary>
            Remove value At Index in Array
            </summary>
            <param name="IndicesArray"></param>
            <param name="RemoveAt"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Make2DArray``1(``0[],System.Int32,System.Int32)">
            <summary>
            Convert 1D array to 2D array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <param name="height"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.Transpose(System.Int32[0:,0:])">
            <summary>
            Transpose 2D array
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.PushToInterval(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Adds the new element to the list, which must contain the specified number of elements. Old elements are replaced.
            </summary>
            <param name="list">The list.</param>
            <param name="maxNumOfElements">Maximum allowed number of elements.</param>
            <param name="newElement">The new value.</param>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.RememberArray``1(System.Collections.Generic.List{``0[]},System.Int32,``0[])">
            <summary>
            Adds the new array to the list of arrays. The list of arrays must contain the specified number of arrays. Old elements are replaced.
            </summary>
            <param name="listOfArrays">The list of arrays.</param>
            <param name="maxNumOfArrays">Maximum allowed number of elements.</param>
            <param name="newArray">The new value.</param>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.AvgDelta(System.Int32[])">
            <summary>
            Calculates the average delta over the list. 1/N * (x2-x1 + X3-X2, + .. + XN-XN-1)
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:NeoCortexApi.Utility.ArrayUtils.FillAtIndexes(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Fills up the array with the specified value at the specified index.
            </summary>
            <param name="arr">Array of indexes at which the specified value has to be set.</param>
            <param name="arrSize">The size of resulting array.</param>
            <param name="val">The value to be set at index positions.</param>
            <returns></returns>
        </member>
    </members>
</doc>
